
Project_Bewegingsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b48  08006b48  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b50  08006b50  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000068  08006bc0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006bc0  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b79  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002747  00000000  00000000  00033c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6e  00000000  00000000  000375f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c1b  00000000  00000000  00038466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016058  00000000  00000000  00059081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cacae  00000000  00000000  0006f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e8  00000000  00000000  00139d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ab0 	.word	0x08006ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006ab0 	.word	0x08006ab0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fd14 	bl	8000f9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f87f 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f9eb 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 f9c3 	bl	8000908 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f991 	bl	80008a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000586:	f000 f919 	bl	80007bc <MX_TIM2_Init>
  MX_I2C1_Init();
 800058a:	f000 f8d7 	bl	800073c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  GPIO_PinState value;
  GPIO_PinState knopValue;
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	4830      	ldr	r0, [pc, #192]	; (8000654 <main+0xe8>)
 8000592:	f004 f8b9 	bl	8004708 <HAL_TIM_PWM_Start>
  HAL_I2C_ListenCpltCallback(&hi2c1);
 8000596:	4830      	ldr	r0, [pc, #192]	; (8000658 <main+0xec>)
 8000598:	f001 fbf7 	bl	8001d8a <HAL_I2C_ListenCpltCallback>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  HAL_I2C_Slave_Receive_IT(&hi2c1, RX_Buffer, sizeof(RX_Buffer));
 800059c:	2201      	movs	r2, #1
 800059e:	492f      	ldr	r1, [pc, #188]	; (800065c <main+0xf0>)
 80005a0:	482d      	ldr	r0, [pc, #180]	; (8000658 <main+0xec>)
 80005a2:	f001 fb01 	bl	8001ba8 <HAL_I2C_Slave_Receive_IT>

	  value = HAL_GPIO_ReadPin(GPIOB, Sensor_Pin);
 80005a6:	2102      	movs	r1, #2
 80005a8:	482d      	ldr	r0, [pc, #180]	; (8000660 <main+0xf4>)
 80005aa:	f001 f9c3 	bl	8001934 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	77fb      	strb	r3, [r7, #31]
	  sensorValue = value;
 80005b2:	4a2c      	ldr	r2, [pc, #176]	; (8000664 <main+0xf8>)
 80005b4:	7ffb      	ldrb	r3, [r7, #31]
 80005b6:	7013      	strb	r3, [r2, #0]
	  knopValue = HAL_GPIO_ReadPin(GPIOB, Knop_Pin);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4829      	ldr	r0, [pc, #164]	; (8000660 <main+0xf4>)
 80005bc:	f001 f9ba 	bl	8001934 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	77bb      	strb	r3, [r7, #30]
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, value);
 80005c4:	7ffb      	ldrb	r3, [r7, #31]
 80005c6:	461a      	mov	r2, r3
 80005c8:	2108      	movs	r1, #8
 80005ca:	4825      	ldr	r0, [pc, #148]	; (8000660 <main+0xf4>)
 80005cc:	f001 f9ca 	bl	8001964 <HAL_GPIO_WritePin>

	  if (value) {
 80005d0:	7ffb      	ldrb	r3, [r7, #31]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d02d      	beq.n	8000632 <main+0xc6>
		  // Open the door
		  for (int x = servoDegree0; x<servoDegree90; x+=4) {
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <main+0xfc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
 80005dc:	e009      	b.n	80005f2 <main+0x86>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, x);
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <main+0xe8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fd4e 	bl	8001088 <HAL_Delay>
		  for (int x = servoDegree0; x<servoDegree90; x+=4) {
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	3304      	adds	r3, #4
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <main+0x100>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f8:	429a      	cmp	r2, r3
 80005fa:	dbf0      	blt.n	80005de <main+0x72>
		  }
		  HAL_Delay(2000);
 80005fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000600:	f000 fd42 	bl	8001088 <HAL_Delay>
		  // Close the door
		  for (int x = servoDegree90; x>=servoDegree0; x-=4) {
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <main+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	623b      	str	r3, [r7, #32]
 800060a:	e009      	b.n	8000620 <main+0xb4>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, x);
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0xe8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6a3a      	ldr	r2, [r7, #32]
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fd37 	bl	8001088 <HAL_Delay>
		  for (int x = servoDegree90; x>=servoDegree0; x-=4) {
 800061a:	6a3b      	ldr	r3, [r7, #32]
 800061c:	3b04      	subs	r3, #4
 800061e:	623b      	str	r3, [r7, #32]
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <main+0xfc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a3a      	ldr	r2, [r7, #32]
 8000626:	429a      	cmp	r2, r3
 8000628:	daf0      	bge.n	800060c <main+0xa0>
		  }
		  HAL_Delay(2000);
 800062a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800062e:	f000 fd2b 	bl	8001088 <HAL_Delay>
	  }

	  char buf[20];
	  int len = sprintf(buf, "%d", knopValue);
 8000632:	7fba      	ldrb	r2, [r7, #30]
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <main+0x104>)
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fd95 	bl	8006168 <siprintf>
 800063e:	61b8      	str	r0, [r7, #24]
	  HAL_UART_Transmit(&huart2, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	b29a      	uxth	r2, r3
 8000644:	1d39      	adds	r1, r7, #4
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x108>)
 800064c:	f005 f8c0 	bl	80057d0 <HAL_UART_Transmit>
  {
 8000650:	e7a4      	b.n	800059c <main+0x30>
 8000652:	bf00      	nop
 8000654:	20000168 	.word	0x20000168
 8000658:	20000084 	.word	0x20000084
 800065c:	2000023c 	.word	0x2000023c
 8000660:	48000400 	.word	0x48000400
 8000664:	2000023d 	.word	0x2000023d
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004
 8000670:	08006ac8 	.word	0x08006ac8
 8000674:	200001b4 	.word	0x200001b4

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fd8e 	bl	80061a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f002 fdf5 	bl	800328c <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f9fc 	bl	8000aa4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ac:	f002 fdd0 	bl	8003250 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <SystemClock_Config+0xc0>)
 80006b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006b6:	4a20      	ldr	r2, [pc, #128]	; (8000738 <SystemClock_Config+0xc0>)
 80006b8:	f023 0318 	bic.w	r3, r3, #24
 80006bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006c0:	2314      	movs	r3, #20
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d0:	2360      	movs	r3, #96	; 0x60
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d8:	2301      	movs	r3, #1
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006e0:	2310      	movs	r3, #16
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fe1f 	bl	8003338 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000700:	f000 f9d0 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fa1f 	bl	8003b60 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000728:	f000 f9bc 	bl	8000aa4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800072c:	f003 fe32 	bl	8004394 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000730:	bf00      	nop
 8000732:	3758      	adds	r7, #88	; 0x58
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C1_Init+0x74>)
 800074e:	2240      	movs	r2, #64	; 0x40
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000778:	f001 f90c 	bl	8001994 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f98f 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C1_Init+0x74>)
 800078a:	f002 fcc9 	bl	8003120 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f986 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2C1_Init+0x74>)
 800079c:	f002 fd0b 	bl	80031b6 <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f97d 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000084 	.word	0x20000084
 80007b4:	40005400 	.word	0x40005400
 80007b8:	00707cbb 	.word	0x00707cbb

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_TIM2_Init+0xe8>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_TIM2_Init+0xe8>)
 80007f8:	220f      	movs	r2, #15
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_TIM2_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000804:	f242 720f 	movw	r2, #9999	; 0x270f
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_TIM2_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000818:	f003 febe 	bl	8004598 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f93f 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000830:	4619      	mov	r1, r3
 8000832:	481c      	ldr	r0, [pc, #112]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000834:	f004 fa5c 	bl	8004cf0 <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800083e:	f000 f931 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000844:	f003 feff 	bl	8004646 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800084e:	f000 f929 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000862:	f004 fee3 	bl	800562c <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800086c:	f000 f91a 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000888:	f004 f91e 	bl	8004ac8 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000892:	f000 f907 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM2_Init+0xe8>)
 8000898:	f000 fa16 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3738      	adds	r7, #56	; 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000168 	.word	0x20000168

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	f004 ff22 	bl	8005734 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f8d5 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200001b4 	.word	0x200001b4
 8000904:	40004400 	.word	0x40004400

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_DMA_Init+0x48>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MX_DMA_Init+0x48>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6493      	str	r3, [r2, #72]	; 0x48
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_DMA_Init+0x48>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2010      	movs	r0, #16
 800092c:	f000 fcab 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000930:	2010      	movs	r0, #16
 8000932:	f000 fcc4 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2011      	movs	r0, #17
 800093c:	f000 fca3 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000940:	2011      	movs	r0, #17
 8000942:	f000 fcbc 	bl	80012be <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_GPIO_Init+0xbc>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <MX_GPIO_Init+0xbc>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_GPIO_Init+0xbc>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_GPIO_Init+0xbc>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <MX_GPIO_Init+0xbc>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_GPIO_Init+0xbc>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_GPIO_Init+0xbc>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <MX_GPIO_Init+0xbc>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_GPIO_Init+0xbc>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2108      	movs	r1, #8
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009b8:	f000 ffd4 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Knop_Pin */
  GPIO_InitStruct.Pin = Knop_Pin;
 80009bc:	2301      	movs	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Knop_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009d0:	f000 fe46 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 80009d4:	2302      	movs	r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009e8:	f000 fe3a 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009ec:	2308      	movs	r3, #8
 80009ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000a04:	f000 fe2c 	bl	8001660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400

08000a18 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d130      	bne.n	8000a8c <HAL_I2C_SlaveRxCpltCallback+0x74>
        uint8_t request = RX_Buffer[0]; // Get the request from master
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	73fb      	strb	r3, [r7, #15]

        // Ensure that the request is within expected range
        if (request == 0x03 | request == 0x04) {
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf0c      	ite	eq
 8000a42:	2301      	moveq	r3, #1
 8000a44:	2300      	movne	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d018      	beq.n	8000a82 <HAL_I2C_SlaveRxCpltCallback+0x6a>
            uint8_t tx_data[2];

            // Send back temperature data if requested
            if (request == 0x03) {
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d108      	bne.n	8000a68 <HAL_I2C_SlaveRxCpltCallback+0x50>
                // Populate tx_data with temperature data
                tx_data[0] = (uint8_t)sensorValue; // Send the 8-bit temperature value
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_I2C_SlaveRxCpltCallback+0x84>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	733b      	strb	r3, [r7, #12]
                tx_data[1] = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	737b      	strb	r3, [r7, #13]

                start = 1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e005      	b.n	8000a74 <HAL_I2C_SlaveRxCpltCallback+0x5c>
            } else if (request == 0x04) {
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d102      	bne.n	8000a74 <HAL_I2C_SlaveRxCpltCallback+0x5c>
            	start = 0;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
            }

            // Transmit the response data
            if (HAL_I2C_Slave_Transmit_IT(hi2c, tx_data, sizeof(tx_data)) != HAL_OK) {
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2202      	movs	r2, #2
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f001 f825 	bl	8001acc <HAL_I2C_Slave_Transmit_IT>
                // Transmission error handling
            }
        }
        // Restart reception for the next request
        HAL_I2C_Slave_Receive_IT(hi2c, RX_Buffer, sizeof(RX_Buffer));
 8000a82:	2201      	movs	r2, #1
 8000a84:	4904      	ldr	r1, [pc, #16]	; (8000a98 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f001 f88e 	bl	8001ba8 <HAL_I2C_Slave_Receive_IT>
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	2000023c 	.word	0x2000023c
 8000a9c:	2000023d 	.word	0x2000023d
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	; 0x78
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2254      	movs	r2, #84	; 0x54
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 fb45 	bl	80061a8 <memset>
  if(hi2c->Instance==I2C1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a51      	ldr	r2, [pc, #324]	; (8000c68 <HAL_I2C_MspInit+0x170>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	f040 809a 	bne.w	8000c5e <HAL_I2C_MspInit+0x166>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fa36 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b42:	f7ff ffaf 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <HAL_I2C_MspInit+0x174>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <HAL_I2C_MspInit+0x174>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <HAL_I2C_MspInit+0x174>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b70:	2304      	movs	r3, #4
 8000b72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fd6f 	bl	8001660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_I2C_MspInit+0x174>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	4a39      	ldr	r2, [pc, #228]	; (8000c6c <HAL_I2C_MspInit+0x174>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_I2C_MspInit+0x174>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000b9c:	4a35      	ldr	r2, [pc, #212]	; (8000c74 <HAL_I2C_MspInit+0x17c>)
 8000b9e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba6:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bd0:	4827      	ldr	r0, [pc, #156]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000bd2:	f000 fb8f 	bl	80012f4 <HAL_DMA_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_I2C_MspInit+0xe8>
    {
      Error_Handler();
 8000bdc:	f7ff ff62 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000be4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_I2C_MspInit+0x178>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_I2C_MspInit+0x184>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c22:	4815      	ldr	r0, [pc, #84]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c24:	f000 fb66 	bl	80012f4 <HAL_DMA_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_I2C_MspInit+0x13a>
    {
      Error_Handler();
 8000c2e:	f7ff ff39 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38
 8000c38:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_I2C_MspInit+0x180>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	201f      	movs	r0, #31
 8000c44:	f000 fb1f 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c48:	201f      	movs	r0, #31
 8000c4a:	f000 fb38 	bl	80012be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2020      	movs	r0, #32
 8000c54:	f000 fb17 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c58:	2020      	movs	r0, #32
 8000c5a:	f000 fb30 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3778      	adds	r7, #120	; 0x78
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	200000d8 	.word	0x200000d8
 8000c74:	40020080 	.word	0x40020080
 8000c78:	20000120 	.word	0x20000120
 8000c7c:	4002006c 	.word	0x4002006c

08000c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d113      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_TIM_Base_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_TIM_Base_MspInit+0x44>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	201c      	movs	r0, #28
 8000cb0:	f000 fae9 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb4:	201c      	movs	r0, #28
 8000cb6:	f000 fb02 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce8:	d11c      	bne.n	8000d24 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_TIM_MspPostInit+0x64>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_TIM_MspPostInit+0x64>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_MspPostInit+0x64>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d02:	2320      	movs	r3, #32
 8000d04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 fc9e 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09e      	sub	sp, #120	; 0x78
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2254      	movs	r2, #84	; 0x54
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 fa29 	bl	80061a8 <memset>
  if(huart->Instance==USART2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_UART_MspInit+0xcc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d148      	bne.n	8000df2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 f91b 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d78:	f7ff fe94 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_UART_MspInit+0xd0>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <HAL_UART_MspInit+0xd0>)
 8000d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d86:	6593      	str	r3, [r2, #88]	; 0x58
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_UART_MspInit+0xd0>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_UART_MspInit+0xd0>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <HAL_UART_MspInit+0xd0>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0xd0>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dac:	2304      	movs	r3, #4
 8000dae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f000 fc49 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000de0:	2303      	movs	r3, #3
 8000de2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f000 fc37 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3778      	adds	r7, #120	; 0x78
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40021000 	.word	0x40021000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8fa 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <DMA1_Channel6_IRQHandler+0x10>)
 8000e5e:	f000 fb42 	bl	80014e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000120 	.word	0x20000120

08000e6c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA1_Channel7_IRQHandler+0x10>)
 8000e72:	f000 fb38 	bl	80014e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000d8 	.word	0x200000d8

08000e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM2_IRQHandler+0x10>)
 8000e86:	f003 fd1d 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000168 	.word	0x20000168

08000e94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <I2C1_EV_IRQHandler+0x10>)
 8000e9a:	f000 fed5 	bl	8001c48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000084 	.word	0x20000084

08000ea8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <I2C1_ER_IRQHandler+0x10>)
 8000eae:	f000 fee5 	bl	8001c7c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000084 	.word	0x20000084

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f005 f964 	bl	80061b8 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20010000 	.word	0x20010000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000240 	.word	0x20000240
 8000f24:	20000390 	.word	0x20000390

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f005 f923 	bl	80061c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff faf5 	bl	800056c <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f90:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f98:	20000390 	.word	0x20000390

08000f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_IRQHandler>

08000f9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f961 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f80e 	bl	8000fd0 <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	e001      	b.n	8000fc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc0:	f7ff fd76 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d023      	beq.n	800102c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_InitTick+0x70>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_InitTick+0x6c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f96d 	bl	80012da <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10f      	bne.n	8001026 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d809      	bhi.n	8001020 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f937 	bl	8001286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_InitTick+0x74>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e007      	b.n	8001030 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e004      	b.n	8001030 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e001      	b.n	8001030 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000014 	.word	0x20000014
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20000010 	.word	0x20000010

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000014 	.word	0x20000014
 800106c:	20000244 	.word	0x20000244

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000244 	.word	0x20000244

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000014 	.word	0x20000014

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e098      	b.n	8001438 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <HAL_DMA_Init+0x150>)
 800130e:	429a      	cmp	r2, r3
 8001310:	d80f      	bhi.n	8001332 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_DMA_Init+0x154>)
 800131a:	4413      	add	r3, r2
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_DMA_Init+0x158>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	009a      	lsls	r2, r3, #2
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_DMA_Init+0x15c>)
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
 8001330:	e00e      	b.n	8001350 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_DMA_Init+0x160>)
 800133a:	4413      	add	r3, r2
 800133c:	4a43      	ldr	r2, [pc, #268]	; (800144c <HAL_DMA_Init+0x158>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	009a      	lsls	r2, r3, #2
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a42      	ldr	r2, [pc, #264]	; (8001458 <HAL_DMA_Init+0x164>)
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013aa:	d039      	beq.n	8001420 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_DMA_Init+0x15c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d11a      	bne.n	80013ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_DMA_Init+0x168>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f003 031c 	and.w	r3, r3, #28
 80013c2:	210f      	movs	r1, #15
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4924      	ldr	r1, [pc, #144]	; (800145c <HAL_DMA_Init+0x168>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_DMA_Init+0x168>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f003 031c 	and.w	r3, r3, #28
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	491d      	ldr	r1, [pc, #116]	; (800145c <HAL_DMA_Init+0x168>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
 80013ea:	e019      	b.n	8001420 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_DMA_Init+0x16c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f003 031c 	and.w	r3, r3, #28
 80013f8:	210f      	movs	r1, #15
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	4917      	ldr	r1, [pc, #92]	; (8001460 <HAL_DMA_Init+0x16c>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_DMA_Init+0x16c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6859      	ldr	r1, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f003 031c 	and.w	r3, r3, #28
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	4911      	ldr	r1, [pc, #68]	; (8001460 <HAL_DMA_Init+0x16c>)
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40020407 	.word	0x40020407
 8001448:	bffdfff8 	.word	0xbffdfff8
 800144c:	cccccccd 	.word	0xcccccccd
 8001450:	40020000 	.word	0x40020000
 8001454:	bffdfbf8 	.word	0xbffdfbf8
 8001458:	40020400 	.word	0x40020400
 800145c:	400200a8 	.word	0x400200a8
 8001460:	400204a8 	.word	0x400204a8

08001464 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d005      	beq.n	8001488 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2204      	movs	r2, #4
 8001480:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e029      	b.n	80014dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020e 	bic.w	r2, r2, #14
 8001496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f003 021c 	and.w	r2, r3, #28
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	4798      	blx	r3
    }
  }
  return status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 031c 	and.w	r3, r3, #28
 8001506:	2204      	movs	r2, #4
 8001508:	409a      	lsls	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d026      	beq.n	8001560 <HAL_DMA_IRQHandler+0x7a>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d021      	beq.n	8001560 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0204 	bic.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 021c 	and.w	r2, r3, #28
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2104      	movs	r1, #4
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	2b00      	cmp	r3, #0
 8001554:	d071      	beq.n	800163a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800155e:	e06c      	b.n	800163a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f003 031c 	and.w	r3, r3, #28
 8001568:	2202      	movs	r2, #2
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02e      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xec>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d029      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10b      	bne.n	80015a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020a 	bic.w	r2, r2, #10
 800159a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 021c 	and.w	r2, r3, #28
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2102      	movs	r1, #2
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d038      	beq.n	800163a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015d0:	e033      	b.n	800163a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f003 031c 	and.w	r3, r3, #28
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d02a      	beq.n	800163c <HAL_DMA_IRQHandler+0x156>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d025      	beq.n	800163c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020e 	bic.w	r2, r2, #14
 80015fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f003 021c 	and.w	r2, r3, #28
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800163a:	bf00      	nop
 800163c:	bf00      	nop
}
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001652:	b2db      	uxtb	r3, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e148      	b.n	8001902 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 813a 	beq.w	80018fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d005      	beq.n	80016a0 <HAL_GPIO_Init+0x40>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 0201 	and.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b03      	cmp	r3, #3
 800170c:	d017      	beq.n	800173e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d123      	bne.n	8001792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0203 	and.w	r2, r3, #3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8094 	beq.w	80018fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d4:	4b52      	ldr	r3, [pc, #328]	; (8001920 <HAL_GPIO_Init+0x2c0>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_GPIO_Init+0x2c0>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6613      	str	r3, [r2, #96]	; 0x60
 80017e0:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <HAL_GPIO_Init+0x2c0>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ec:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_GPIO_Init+0x2c4>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1d4>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a43      	ldr	r2, [pc, #268]	; (8001928 <HAL_GPIO_Init+0x2c8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1d0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a42      	ldr	r2, [pc, #264]	; (800192c <HAL_GPIO_Init+0x2cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1cc>
 8001828:	2302      	movs	r3, #2
 800182a:	e004      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 800182c:	2307      	movs	r3, #7
 800182e:	e002      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 8001834:	2300      	movs	r3, #0
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	4093      	lsls	r3, r2
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001846:	4937      	ldr	r1, [pc, #220]	; (8001924 <HAL_GPIO_Init+0x2c4>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	f47f aeaf 	bne.w	8001670 <HAL_GPIO_Init+0x10>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000
 8001924:	40010000 	.word	0x40010000
 8001928:	48000400 	.word	0x48000400
 800192c:	48000800 	.word	0x48000800
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001980:	e002      	b.n	8001988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e08d      	b.n	8001ac2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff f89c 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d108      	bne.n	8001a36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	e007      	b.n	8001a46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69d9      	ldr	r1, [r3, #28]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d156      	bne.n	8001b94 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_I2C_Slave_Transmit_IT+0x28>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e050      	b.n	8001b96 <HAL_I2C_Slave_Transmit_IT+0xca>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2221      	movs	r2, #33	; 0x21
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b20:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	88fa      	ldrh	r2, [r7, #6]
 8001b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b4c:	d117      	bne.n	8001b7e <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001b86:	f248 0101 	movw	r1, #32769	; 0x8001
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f001 f9e6 	bl	8002f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	ffff0000 	.word	0xffff0000
 8001ba4:	08001def 	.word	0x08001def

08001ba8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d139      	bne.n	8001c36 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2C_Slave_Receive_IT+0x28>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e033      	b.n	8001c38 <HAL_I2C_Slave_Receive_IT+0x90>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2222      	movs	r2, #34	; 0x22
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bfc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_I2C_Slave_Receive_IT+0x98>)
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001c28:	f248 0102 	movw	r1, #32770	; 0x8002
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f001 f995 	bl	8002f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	ffff0000 	.word	0xffff0000
 8001c44:	08001def 	.word	0x08001def

08001c48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
  }
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00f      	beq.n	8001cbe <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00f      	beq.n	8001ce8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f043 0208 	orr.w	r2, r3, #8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00f      	beq.n	8001d12 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00a      	beq.n	8001d12 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f043 0202 	orr.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 030b 	and.w	r3, r3, #11
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 ff8d 	bl	8002c44 <I2C_ITError>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <I2C_Slave_ISR_IT+0x24>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0e1      	b.n	8001fd6 <I2C_Slave_ISR_IT+0x1e8>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e2e:	6939      	ldr	r1, [r7, #16]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fda1 	bl	8002978 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d04b      	beq.n	8001ed8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d046      	beq.n	8001ed8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d128      	bne.n	8001ea6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b28      	cmp	r3, #40	; 0x28
 8001e5e:	d108      	bne.n	8001e72 <I2C_Slave_ISR_IT+0x84>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e66:	d104      	bne.n	8001e72 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e68:	6939      	ldr	r1, [r7, #16]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fe96 	bl	8002b9c <I2C_ITListenCplt>
 8001e70:	e031      	b.n	8001ed6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b29      	cmp	r3, #41	; 0x29
 8001e7c:	d10e      	bne.n	8001e9c <I2C_Slave_ISR_IT+0xae>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e84:	d00a      	beq.n	8001e9c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 ffef 	bl	8002e72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 fc4a 	bl	800272e <I2C_ITSlaveSeqCplt>
 8001e9a:	e01c      	b.n	8001ed6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ea4:	e08f      	b.n	8001fc6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2210      	movs	r2, #16
 8001eac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f043 0204 	orr.w	r2, r3, #4
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <I2C_Slave_ISR_IT+0xda>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec6:	d17e      	bne.n	8001fc6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	4619      	mov	r1, r3
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 feb8 	bl	8002c44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ed4:	e077      	b.n	8001fc6 <I2C_Slave_ISR_IT+0x1d8>
 8001ed6:	e076      	b.n	8001fc6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02f      	beq.n	8001f42 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d02a      	beq.n	8001f42 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d018      	beq.n	8001f28 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d14b      	bne.n	8001fca <I2C_Slave_ISR_IT+0x1dc>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f38:	d047      	beq.n	8001fca <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fbf7 	bl	800272e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f40:	e043      	b.n	8001fca <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001f56:	6939      	ldr	r1, [r7, #16]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fb27 	bl	80025ac <I2C_ITAddrCplt>
 8001f5e:	e035      	b.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d030      	beq.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d02b      	beq.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d018      	beq.n	8001fb0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
 8001fae:	e00d      	b.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb6:	d002      	beq.n	8001fbe <I2C_Slave_ISR_IT+0x1d0>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fbb5 	bl	800272e <I2C_ITSlaveSeqCplt>
 8001fc4:	e002      	b.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001fc6:	bf00      	nop
 8001fc8:	e000      	b.n	8001fcc <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001fca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b088      	sub	sp, #32
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <I2C_Master_ISR_DMA+0x1a>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0d9      	b.n	80021ac <I2C_Master_ISR_DMA+0x1ce>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002010:	2b00      	cmp	r3, #0
 8002012:	d011      	beq.n	8002038 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f043 0204 	orr.w	r2, r3, #4
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002028:	2120      	movs	r1, #32
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 ff96 	bl	8002f5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 ff1e 	bl	8002e72 <I2C_Flush_TXDR>
 8002036:	e0b4      	b.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d071      	beq.n	8002126 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002048:	2b00      	cmp	r3, #0
 800204a:	d06c      	beq.n	8002126 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04e      	beq.n	8002104 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002072:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2bff      	cmp	r3, #255	; 0xff
 800207c:	d906      	bls.n	800208c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22ff      	movs	r2, #255	; 0xff
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e010      	b.n	80020ae <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800209e:	d003      	beq.n	80020a8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e002      	b.n	80020ae <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80020a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ac:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	8a79      	ldrh	r1, [r7, #18]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 ff1b 	bl	8002ef8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b22      	cmp	r3, #34	; 0x22
 80020de:	d108      	bne.n	80020f2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020f0:	e057      	b.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002100:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002102:	e04e      	b.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002112:	d003      	beq.n	800211c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 facd 	bl	80026b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800211a:	e042      	b.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fd90 	bl	8002c44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002124:	e03d      	b.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d028      	beq.n	8002182 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002136:	2b00      	cmp	r3, #0
 8002138:	d023      	beq.n	8002182 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d119      	bne.n	8002178 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002152:	d025      	beq.n	80021a0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800215c:	d108      	bne.n	8002170 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800216c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800216e:	e017      	b.n	80021a0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fa9f 	bl	80026b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002176:	e013      	b.n	80021a0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fd62 	bl	8002c44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002180:	e00e      	b.n	80021a0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fb25 	bl	80027e8 <I2C_ITMasterCplt>
 800219e:	e000      	b.n	80021a2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80021a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80021c0:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <I2C_Mem_ISR_DMA+0x244>)
 80021c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <I2C_Mem_ISR_DMA+0x1e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e10e      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x23c>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d011      	beq.n	8002212 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2210      	movs	r2, #16
 80021f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f043 0204 	orr.w	r2, r3, #4
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002202:	2120      	movs	r1, #32
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fea9 	bl	8002f5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fe31 	bl	8002e72 <I2C_Flush_TXDR>
 8002210:	e0e9      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f04f 32ff 	mov.w	r2, #4294967295
 8002236:	651a      	str	r2, [r3, #80]	; 0x50
 8002238:	e0d5      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d05f      	beq.n	8002304 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800224a:	2b00      	cmp	r3, #0
 800224c:	d05a      	beq.n	8002304 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800224e:	2101      	movs	r1, #1
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 ff07 	bl	8003064 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002256:	2110      	movs	r1, #16
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fe7f 	bl	8002f5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d048      	beq.n	80022fa <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	2bff      	cmp	r3, #255	; 0xff
 8002270:	d910      	bls.n	8002294 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	b299      	uxth	r1, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	b2da      	uxtb	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fe33 	bl	8002ef8 <I2C_TransferConfig>
 8002292:	e011      	b.n	80022b8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	b299      	uxth	r1, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	2300      	movs	r3, #0
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fe20 	bl	8002ef8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b22      	cmp	r3, #34	; 0x22
 80022d4:	d108      	bne.n	80022e8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022e6:	e07e      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022f8:	e075      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fca1 	bl	8002c44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002302:	e070      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d05d      	beq.n	80023ca <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002314:	2b00      	cmp	r3, #0
 8002316:	d058      	beq.n	80023ca <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002318:	2101      	movs	r1, #1
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fea2 	bl	8003064 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002320:	2110      	movs	r1, #16
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fe1a 	bl	8002f5c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b22      	cmp	r3, #34	; 0x22
 8002332:	d101      	bne.n	8002338 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <I2C_Mem_ISR_DMA+0x248>)
 8002336:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2bff      	cmp	r3, #255	; 0xff
 8002340:	d910      	bls.n	8002364 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	22ff      	movs	r2, #255	; 0xff
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	b299      	uxth	r1, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	b2da      	uxtb	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fdcb 	bl	8002ef8 <I2C_TransferConfig>
 8002362:	e011      	b.n	8002388 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	b299      	uxth	r1, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fdb8 	bl	8002ef8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b22      	cmp	r3, #34	; 0x22
 80023a4:	d108      	bne.n	80023b8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b6:	e016      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023c8:	e00d      	b.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fa01 	bl	80027e8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	80002000 	.word	0x80002000
 80023fc:	80002400 	.word	0x80002400

08002400 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <I2C_Slave_ISR_DMA+0x24>
 8002420:	2302      	movs	r3, #2
 8002422:	e0bf      	b.n	80025a4 <I2C_Slave_ISR_DMA+0x1a4>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa98 	bl	8002978 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8095 	beq.w	800257e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 808f 	beq.w	800257e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002470:	2b00      	cmp	r3, #0
 8002472:	d07d      	beq.n	8002570 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d128      	bne.n	8002510 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b28      	cmp	r3, #40	; 0x28
 80024c8:	d108      	bne.n	80024dc <I2C_Slave_ISR_DMA+0xdc>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024d0:	d104      	bne.n	80024dc <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fb61 	bl	8002b9c <I2C_ITListenCplt>
 80024da:	e048      	b.n	800256e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b29      	cmp	r3, #41	; 0x29
 80024e6:	d10e      	bne.n	8002506 <I2C_Slave_ISR_DMA+0x106>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ee:	d00a      	beq.n	8002506 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fcba 	bl	8002e72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f915 	bl	800272e <I2C_ITSlaveSeqCplt>
 8002504:	e033      	b.n	800256e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2210      	movs	r2, #16
 800250c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800250e:	e034      	b.n	800257a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <I2C_Slave_ISR_DMA+0x13a>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d11f      	bne.n	800257a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b21      	cmp	r3, #33	; 0x21
 800253e:	d002      	beq.n	8002546 <I2C_Slave_ISR_DMA+0x146>
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	2b29      	cmp	r3, #41	; 0x29
 8002544:	d103      	bne.n	800254e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2221      	movs	r2, #33	; 0x21
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
 800254c:	e008      	b.n	8002560 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b22      	cmp	r3, #34	; 0x22
 8002552:	d002      	beq.n	800255a <I2C_Slave_ISR_DMA+0x15a>
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b2a      	cmp	r3, #42	; 0x2a
 8002558:	d102      	bne.n	8002560 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2222      	movs	r2, #34	; 0x22
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	4619      	mov	r1, r3
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fb6c 	bl	8002c44 <I2C_ITError>
      if (treatdmanack == 1U)
 800256c:	e005      	b.n	800257a <I2C_Slave_ISR_DMA+0x17a>
 800256e:	e004      	b.n	800257a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002578:	e00f      	b.n	800259a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800257a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800257c:	e00d      	b.n	800259a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f809 	bl	80025ac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025c2:	2b28      	cmp	r3, #40	; 0x28
 80025c4:	d16a      	bne.n	800269c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80025e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002600:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d138      	bne.n	800267c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	09db      	lsrs	r3, r3, #7
 800260e:	b29a      	uxth	r2, r3
 8002610:	89bb      	ldrh	r3, [r7, #12]
 8002612:	4053      	eors	r3, r2
 8002614:	b29b      	uxth	r3, r3
 8002616:	f003 0306 	and.w	r3, r3, #6
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11c      	bne.n	8002658 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002630:	2b02      	cmp	r3, #2
 8002632:	d13b      	bne.n	80026ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800264a:	89ba      	ldrh	r2, [r7, #12]
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fb8c 	bl	8001d6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002656:	e029      	b.n	80026ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002658:	893b      	ldrh	r3, [r7, #8]
 800265a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800265c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fcff 	bl	8003064 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800266e:	89ba      	ldrh	r2, [r7, #12]
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fb7a 	bl	8001d6e <HAL_I2C_AddrCallback>
}
 800267a:	e017      	b.n	80026ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800267c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fcef 	bl	8003064 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800268e:	89ba      	ldrh	r2, [r7, #12]
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fb6a 	bl	8001d6e <HAL_I2C_AddrCallback>
}
 800269a:	e007      	b.n	80026ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b21      	cmp	r3, #33	; 0x21
 80026ce:	d115      	bne.n	80026fc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2211      	movs	r2, #17
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026e4:	2101      	movs	r1, #1
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fcbc 	bl	8003064 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fb1c 	bl	8001d32 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026fa:	e014      	b.n	8002726 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2212      	movs	r2, #18
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002710:	2102      	movs	r1, #2
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fca6 	bl	8003064 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fb10 	bl	8001d46 <HAL_I2C_MasterRxCpltCallback>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e00c      	b.n	800277c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800277a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b29      	cmp	r3, #41	; 0x29
 8002786:	d112      	bne.n	80027ae <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2228      	movs	r2, #40	; 0x28
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002796:	2101      	movs	r1, #1
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fc63 	bl	8003064 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fad7 	bl	8001d5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027ac:	e017      	b.n	80027de <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b2a      	cmp	r3, #42	; 0x2a
 80027b8:	d111      	bne.n	80027de <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2228      	movs	r2, #40	; 0x28
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2222      	movs	r2, #34	; 0x22
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027c8:	2102      	movs	r1, #2
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fc4a 	bl	8003064 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fe f91d 	bl	8000a18 <HAL_I2C_SlaveRxCpltCallback>
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b21      	cmp	r3, #33	; 0x21
 8002808:	d107      	bne.n	800281a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800280a:	2101      	movs	r1, #1
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fc29 	bl	8003064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2211      	movs	r2, #17
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
 8002818:	e00c      	b.n	8002834 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b22      	cmp	r3, #34	; 0x22
 8002824:	d106      	bne.n	8002834 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002826:	2102      	movs	r1, #2
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fc1b 	bl	8003064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2212      	movs	r2, #18
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <I2C_ITMasterCplt+0x188>)
 8002840:	400b      	ands	r3, r1
 8002842:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a49      	ldr	r2, [pc, #292]	; (8002974 <I2C_ITMasterCplt+0x18c>)
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2210      	movs	r2, #16
 8002860:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b60      	cmp	r3, #96	; 0x60
 8002878:	d10a      	bne.n	8002890 <I2C_ITMasterCplt+0xa8>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	b2db      	uxtb	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800288e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 faee 	bl	8002e72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d002      	beq.n	80028ae <I2C_ITMasterCplt+0xc6>
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f9c5 	bl	8002c44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028ba:	e054      	b.n	8002966 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b21      	cmp	r3, #33	; 0x21
 80028c6:	d124      	bne.n	8002912 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d10b      	bne.n	80028fa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fa53 	bl	8001d9e <HAL_I2C_MemTxCpltCallback>
}
 80028f8:	e035      	b.n	8002966 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fa11 	bl	8001d32 <HAL_I2C_MasterTxCpltCallback>
}
 8002910:	e029      	b.n	8002966 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b22      	cmp	r3, #34	; 0x22
 800291c:	d123      	bne.n	8002966 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d10b      	bne.n	8002950 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fa32 	bl	8001db2 <HAL_I2C_MemRxCpltCallback>
}
 800294e:	e00a      	b.n	8002966 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff f9f0 	bl	8001d46 <HAL_I2C_MasterRxCpltCallback>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	fe00e800 	.word	0xfe00e800
 8002974:	ffff0000 	.word	0xffff0000

08002978 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2220      	movs	r2, #32
 800299c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b21      	cmp	r3, #33	; 0x21
 80029a2:	d002      	beq.n	80029aa <I2C_ITSlaveCplt+0x32>
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b29      	cmp	r3, #41	; 0x29
 80029a8:	d108      	bne.n	80029bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80029aa:	f248 0101 	movw	r1, #32769	; 0x8001
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fb58 	bl	8003064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2221      	movs	r2, #33	; 0x21
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ba:	e019      	b.n	80029f0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b22      	cmp	r3, #34	; 0x22
 80029c0:	d002      	beq.n	80029c8 <I2C_ITSlaveCplt+0x50>
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b2a      	cmp	r3, #42	; 0x2a
 80029c6:	d108      	bne.n	80029da <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80029c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fb49 	bl	8003064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2222      	movs	r2, #34	; 0x22
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
 80029d8:	e00a      	b.n	80029f0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b28      	cmp	r3, #40	; 0x28
 80029de:	d107      	bne.n	80029f0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80029e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fb3d 	bl	8003064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <I2C_ITSlaveCplt+0x21c>)
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa2e 	bl	8002e72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a2e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01f      	beq.n	8002a78 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a46:	e017      	b.n	8002a78 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d020      	beq.n	8002ac4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f023 0304 	bic.w	r3, r3, #4
 8002a88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8a4 	bl	8002c44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b28      	cmp	r3, #40	; 0x28
 8002b06:	d141      	bne.n	8002b8c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b08:	6979      	ldr	r1, [r7, #20]
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f846 	bl	8002b9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b10:	e03c      	b.n	8002b8c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b1a:	d014      	beq.n	8002b46 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fe06 	bl	800272e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <I2C_ITSlaveCplt+0x220>)
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff f923 	bl	8001d8a <HAL_I2C_ListenCpltCallback>
}
 8002b44:	e022      	b.n	8002b8c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b22      	cmp	r3, #34	; 0x22
 8002b50:	d10e      	bne.n	8002b70 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fd ff55 	bl	8000a18 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b6e:	e00d      	b.n	8002b8c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff f8e7 	bl	8001d5a <HAL_I2C_SlaveTxCpltCallback>
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	fe00e800 	.word	0xfe00e800
 8002b98:	ffff0000 	.word	0xffff0000

08002b9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <I2C_ITListenCplt+0xa4>)
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d022      	beq.n	8002c18 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d012      	beq.n	8002c18 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c18:	f248 0103 	movw	r1, #32771	; 0x8003
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa21 	bl	8003064 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2210      	movs	r2, #16
 8002c28:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff f8a9 	bl	8001d8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	ffff0000 	.word	0xffff0000

08002c44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a6d      	ldr	r2, [pc, #436]	; (8002e18 <I2C_ITError+0x1d4>)
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b28      	cmp	r3, #40	; 0x28
 8002c7a:	d005      	beq.n	8002c88 <I2C_ITError+0x44>
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b29      	cmp	r3, #41	; 0x29
 8002c80:	d002      	beq.n	8002c88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b2a      	cmp	r3, #42	; 0x2a
 8002c86:	d10b      	bne.n	8002ca0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c88:	2103      	movs	r1, #3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9ea 	bl	8003064 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2228      	movs	r2, #40	; 0x28
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a60      	ldr	r2, [pc, #384]	; (8002e1c <I2C_ITError+0x1d8>)
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9e:	e030      	b.n	8002d02 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ca0:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f9dd 	bl	8003064 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8e1 	bl	8002e72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b60      	cmp	r3, #96	; 0x60
 8002cba:	d01f      	beq.n	8002cfc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d114      	bne.n	8002cfc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d109      	bne.n	8002cf4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d039      	beq.n	8002d84 <I2C_ITError+0x140>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b11      	cmp	r3, #17
 8002d14:	d002      	beq.n	8002d1c <I2C_ITError+0xd8>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b21      	cmp	r3, #33	; 0x21
 8002d1a:	d133      	bne.n	8002d84 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2a:	d107      	bne.n	8002d3c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fc7f 	bl	8001644 <HAL_DMA_GetState>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d017      	beq.n	8002d7c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	4a33      	ldr	r2, [pc, #204]	; (8002e20 <I2C_ITError+0x1dc>)
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fb7f 	bl	8001464 <HAL_DMA_Abort_IT>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d04d      	beq.n	8002e08 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d76:	4610      	mov	r0, r2
 8002d78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d7a:	e045      	b.n	8002e08 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f851 	bl	8002e24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d82:	e041      	b.n	8002e08 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d039      	beq.n	8002e00 <I2C_ITError+0x1bc>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d002      	beq.n	8002d98 <I2C_ITError+0x154>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b22      	cmp	r3, #34	; 0x22
 8002d96:	d133      	bne.n	8002e00 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da6:	d107      	bne.n	8002db8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fc41 	bl	8001644 <HAL_DMA_GetState>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d017      	beq.n	8002df8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <I2C_ITError+0x1dc>)
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fb41 	bl	8001464 <HAL_DMA_Abort_IT>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d011      	beq.n	8002e0c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002df2:	4610      	mov	r0, r2
 8002df4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002df6:	e009      	b.n	8002e0c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f813 	bl	8002e24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dfe:	e005      	b.n	8002e0c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f80f 	bl	8002e24 <I2C_TreatErrorCallback>
  }
}
 8002e06:	e002      	b.n	8002e0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e0c:	bf00      	nop
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	ffff0000 	.word	0xffff0000
 8002e1c:	08001def 	.word	0x08001def
 8002e20:	08002ebb 	.word	0x08002ebb

08002e24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d10e      	bne.n	8002e56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe ffc3 	bl	8001dda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e54:	e009      	b.n	8002e6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe ffae 	bl	8001dc6 <HAL_I2C_ErrorCallback>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d103      	bne.n	8002e90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d007      	beq.n	8002eae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	619a      	str	r2, [r3, #24]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff ff9b 	bl	8002e24 <I2C_TreatErrorCallback>
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f10:	7a7b      	ldrb	r3, [r7, #9]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	0d5b      	lsrs	r3, r3, #21
 8002f32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <I2C_TransferConfig+0x60>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	ea02 0103 	and.w	r1, r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	03ff63ff 	.word	0x03ff63ff

08002f5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	4a39      	ldr	r2, [pc, #228]	; (8003058 <I2C_Enable_IRQ+0xfc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d032      	beq.n	8002fdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f7a:	4a38      	ldr	r2, [pc, #224]	; (800305c <I2C_Enable_IRQ+0x100>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02d      	beq.n	8002fdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f84:	4a36      	ldr	r2, [pc, #216]	; (8003060 <I2C_Enable_IRQ+0x104>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d028      	beq.n	8002fdc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da03      	bge.n	8002f9a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002f98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002faa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002fbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d103      	bne.n	8002fcc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002fca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d133      	bne.n	800303a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fda:	e02e      	b.n	800303a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da03      	bge.n	8002fec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002fea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002ffc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800300e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	2b10      	cmp	r3, #16
 8003014:	d103      	bne.n	800301e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800301c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	2b20      	cmp	r3, #32
 8003022:	d103      	bne.n	800302c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800302a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d103      	bne.n	800303a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003038:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	08001fdf 	.word	0x08001fdf
 800305c:	08002401 	.word	0x08002401
 8003060:	080021b5 	.word	0x080021b5

08003064 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00f      	beq.n	800309e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003084:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003092:	2b28      	cmp	r3, #40	; 0x28
 8003094:	d003      	beq.n	800309e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800309c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00f      	beq.n	80030c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80030ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030bc:	2b28      	cmp	r3, #40	; 0x28
 80030be:	d003      	beq.n	80030c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da03      	bge.n	80030d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d103      	bne.n	80030e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d103      	bne.n	80030f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d103      	bne.n	8003102 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003100:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43da      	mvns	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	400a      	ands	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b20      	cmp	r3, #32
 8003134:	d138      	bne.n	80031a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003140:	2302      	movs	r3, #2
 8003142:	e032      	b.n	80031aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d139      	bne.n	8003240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e033      	b.n	8003242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2224      	movs	r2, #36	; 0x24
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40007000 	.word	0x40007000

08003270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_PWREx_GetVoltageRange+0x18>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40007000 	.word	0x40007000

0800328c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329a:	d130      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d038      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2232      	movs	r2, #50	; 0x32
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d0:	e002      	b.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d102      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f2      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f8:	d110      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e00f      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d007      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003314:	4a05      	ldr	r2, [pc, #20]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40007000 	.word	0x40007000
 8003330:	2000000c 	.word	0x2000000c
 8003334:	431bde83 	.word	0x431bde83

08003338 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f000 bc02 	b.w	8003b50 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334c:	4b96      	ldr	r3, [pc, #600]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003356:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80e4 	beq.w	8003536 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_RCC_OscConfig+0x4c>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	f040 808b 	bne.w	8003492 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b01      	cmp	r3, #1
 8003380:	f040 8087 	bne.w	8003492 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003384:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_OscConfig+0x64>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e3d9      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1a      	ldr	r2, [r3, #32]
 80033a0:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_RCC_OscConfig+0x7e>
 80033ac:	4b7e      	ldr	r3, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b4:	e005      	b.n	80033c2 <HAL_RCC_OscConfig+0x8a>
 80033b6:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d223      	bcs.n	800340e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fd8c 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e3ba      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	496d      	ldr	r1, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4968      	ldr	r1, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	e025      	b.n	800345a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4960      	ldr	r1, [pc, #384]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	495b      	ldr	r1, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fd4c 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e37a      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800345a:	f000 fc81 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	4950      	ldr	r1, [pc, #320]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_RCC_OscConfig+0x278>)
 8003478:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800347a:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fda6 	bl	8000fd0 <HAL_InitTick>
 8003484:	4603      	mov	r3, r0
 8003486:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d052      	beq.n	8003534 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	e35e      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d032      	beq.n	8003500 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a42      	ldr	r2, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a6:	f7fd fde3 	bl	8001070 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ae:	f7fd fddf 	bl	8001070 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e347      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4930      	ldr	r1, [pc, #192]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	492b      	ldr	r1, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
 80034fe:	e01a      	b.n	8003536 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350c:	f7fd fdb0 	bl	8001070 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003514:	f7fd fdac 	bl	8001070 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e314      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1dc>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d073      	beq.n	800362a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d005      	beq.n	8003554 <HAL_RCC_OscConfig+0x21c>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d10e      	bne.n	800356c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d063      	beq.n	8003628 <HAL_RCC_OscConfig+0x2f0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d15f      	bne.n	8003628 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e2f1      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x24c>
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e025      	b.n	80035d0 <HAL_RCC_OscConfig+0x298>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d114      	bne.n	80035b8 <HAL_RCC_OscConfig+0x280>
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e013      	b.n	80035d0 <HAL_RCC_OscConfig+0x298>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08006acc 	.word	0x08006acc
 80035b0:	2000000c 	.word	0x2000000c
 80035b4:	20000010 	.word	0x20000010
 80035b8:	4ba0      	ldr	r3, [pc, #640]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a9f      	ldr	r2, [pc, #636]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b9d      	ldr	r3, [pc, #628]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a9c      	ldr	r2, [pc, #624]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd fd4a 	bl	8001070 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fd fd46 	bl	8001070 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e2ae      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f2:	4b92      	ldr	r3, [pc, #584]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2a8>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fd36 	bl	8001070 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd fd32 	bl	8001070 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e29a      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361a:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x2d0>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d060      	beq.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x310>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d119      	bne.n	8003676 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d116      	bne.n	8003676 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003648:	4b7c      	ldr	r3, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x328>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e277      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	4973      	ldr	r1, [pc, #460]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003674:	e040      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d023      	beq.n	80036c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367e:	4b6f      	ldr	r3, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6e      	ldr	r2, [pc, #440]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fd fcf1 	bl	8001070 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fd fced 	bl	8001070 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e255      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b62      	ldr	r3, [pc, #392]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	495f      	ldr	r1, [pc, #380]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	e018      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5c      	ldr	r2, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd fccd 	bl	8001070 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7fd fcc9 	bl	8001070 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e231      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03c      	beq.n	800377e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fd fca8 	bl	8001070 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003724:	f7fd fca4 	bl	8001070 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e20c      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <HAL_RCC_OscConfig+0x3ec>
 8003744:	e01b      	b.n	800377e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	4a3b      	ldr	r2, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fd fc8b 	bl	8001070 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375e:	f7fd fc87 	bl	8001070 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1ef      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1ef      	bne.n	800375e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a6 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003790:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d118      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d0:	f7fd fc4e 	bl	8001070 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fd fc4a 	bl	8001070 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1b2      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_RCC_OscConfig+0x4d8>
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380e:	e029      	b.n	8003864 <HAL_RCC_OscConfig+0x52c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b05      	cmp	r3, #5
 8003816:	d115      	bne.n	8003844 <HAL_RCC_OscConfig+0x50c>
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003838:	e014      	b.n	8003864 <HAL_RCC_OscConfig+0x52c>
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	4a99      	ldr	r2, [pc, #612]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003854:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a95      	ldr	r2, [pc, #596]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d016      	beq.n	800389a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fd fc00 	bl	8001070 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fd fbfc 	bl	8001070 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e162      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ed      	beq.n	8003874 <HAL_RCC_OscConfig+0x53c>
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fd fbe9 	bl	8001070 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fbe5 	bl	8001070 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e14b      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b8:	4b7d      	ldr	r3, [pc, #500]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ed      	bne.n	80038a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c6:	7ffb      	ldrb	r3, [r7, #31]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a77      	ldr	r2, [pc, #476]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03c      	beq.n	800395e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01c      	beq.n	8003926 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038ec:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f2:	4a6f      	ldr	r2, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fbb8 	bl	8001070 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003904:	f7fd fbb4 	bl	8001070 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e11c      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ef      	beq.n	8003904 <HAL_RCC_OscConfig+0x5cc>
 8003924:	e01b      	b.n	800395e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003926:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392c:	4a60      	ldr	r2, [pc, #384]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fd fb9b 	bl	8001070 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393e:	f7fd fb97 	bl	8001070 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0ff      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003950:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ef      	bne.n	800393e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80f3 	beq.w	8003b4e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	2b02      	cmp	r3, #2
 800396e:	f040 80c9 	bne.w	8003b04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003972:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d12c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	3b01      	subs	r3, #1
 8003992:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d123      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d11b      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d113      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	3b01      	subs	r3, #1
 80039c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d109      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d06b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d062      	beq.n	8003aac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0ac      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2d      	ldr	r2, [pc, #180]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80039fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a02:	f7fd fb35 	bl	8001070 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd fb31 	bl	8001070 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e099      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_RCC_OscConfig+0x77c>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a42:	0212      	lsls	r2, r2, #8
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0552      	lsls	r2, r2, #21
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a56:	0852      	lsrs	r2, r2, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0652      	lsls	r2, r2, #25
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a62:	06d2      	lsls	r2, r2, #27
 8003a64:	430a      	orrs	r2, r1
 8003a66:	4912      	ldr	r1, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a84:	f7fd faf4 	bl	8001070 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fd faf0 	bl	8001070 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e058      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aaa:	e050      	b.n	8003b4e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04f      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d144      	bne.n	8003b4e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003adc:	f7fd fac8 	bl	8001070 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd fac4 	bl	8001070 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e02c      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7ac>
 8003b02:	e024      	b.n	8003b4e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d01f      	beq.n	8003b4a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd faab 	bl	8001070 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd faa7 	bl	8001070 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4905      	ldr	r1, [pc, #20]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_OscConfig+0x824>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
 8003b48:	e001      	b.n	8003b4e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	feeefffc 	.word	0xfeeefffc

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0e7      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d910      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4970      	ldr	r1, [pc, #448]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0cf      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d908      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4960      	ldr	r1, [pc, #384]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04c      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	4b5a      	ldr	r3, [pc, #360]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0a6      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e09a      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c16:	4b4e      	ldr	r3, [pc, #312]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e08e      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e086      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4943      	ldr	r1, [pc, #268]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fd fa12 	bl	8001070 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fd fa0e 	bl	8001070 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e06e      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 020c 	and.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1eb      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d208      	bcs.n	8003ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	492b      	ldr	r1, [pc, #172]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d210      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 0207 	bic.w	r2, r3, #7
 8003cbc:	4923      	ldr	r1, [pc, #140]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e036      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4918      	ldr	r1, [pc, #96]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4910      	ldr	r1, [pc, #64]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d14:	f000 f824 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	490b      	ldr	r1, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1f4>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1f8>)
 8003d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1fc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fd f949 	bl	8000fd0 <HAL_InitTick>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d42:	7afb      	ldrb	r3, [r7, #11]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08006acc 	.word	0x08006acc
 8003d58:	2000000c 	.word	0x2000000c
 8003d5c:	20000010 	.word	0x20000010

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d121      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d11e      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e004      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d134      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d003      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0xac>
 8003e04:	e005      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e08:	617b      	str	r3, [r7, #20]
      break;
 8003e0a:	e005      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e0e:	617b      	str	r3, [r7, #20]
      break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	3301      	adds	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	0e5b      	lsrs	r3, r3, #25
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e58:	69bb      	ldr	r3, [r7, #24]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08006ae4 	.word	0x08006ae4
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	08006adc 	.word	0x08006adc

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ec0:	f7ff ffda 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0adb      	lsrs	r3, r3, #11
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08006adc 	.word	0x08006adc

08003ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f00:	f7ff f9b6 	bl	8003270 <HAL_PWREx_GetVoltageRange>
 8003f04:	6178      	str	r0, [r7, #20]
 8003f06:	e014      	b.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6593      	str	r3, [r2, #88]	; 0x58
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f20:	f7ff f9a6 	bl	8003270 <HAL_PWREx_GetVoltageRange>
 8003f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d10b      	bne.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d919      	bls.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2ba0      	cmp	r3, #160	; 0xa0
 8003f44:	d902      	bls.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f46:	2302      	movs	r3, #2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e013      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e010      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d902      	bls.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f58:	2303      	movs	r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e00a      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d102      	bne.n	8003f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f64:	2302      	movs	r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	e004      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d101      	bne.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f70:	2301      	movs	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 0207 	bic.w	r2, r3, #7
 8003f7c:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d031      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fcc:	d01a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fd2:	d814      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fde:	4b5d      	ldr	r3, [pc, #372]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a5c      	ldr	r2, [pc, #368]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fea:	e00c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f9de 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	74fb      	strb	r3, [r7, #19]
      break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400c:	4b51      	ldr	r3, [pc, #324]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	494e      	ldr	r1, [pc, #312]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 809e 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800403a:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b40      	ldr	r3, [pc, #256]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004068:	2301      	movs	r3, #1
 800406a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406c:	4b3a      	ldr	r3, [pc, #232]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a39      	ldr	r2, [pc, #228]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004078:	f7fc fffa 	bl	8001070 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fc fff6 	bl	8001070 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	74fb      	strb	r3, [r7, #19]
        break;
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d15a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040a6:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d019      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d016      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fc ffb6 	bl	8001070 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	e00b      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fc ffb2 	bl	8001070 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d902      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	74fb      	strb	r3, [r7, #19]
            break;
 800411e:	e006      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ec      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800414a:	e009      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004160:	7c7b      	ldrb	r3, [r7, #17]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	4b8a      	ldr	r3, [pc, #552]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	4a89      	ldr	r2, [pc, #548]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800416c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004170:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800417e:	4b84      	ldr	r3, [pc, #528]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f023 0203 	bic.w	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4980      	ldr	r1, [pc, #512]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a0:	4b7b      	ldr	r3, [pc, #492]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 020c 	bic.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4978      	ldr	r1, [pc, #480]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c2:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	496f      	ldr	r1, [pc, #444]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	4967      	ldr	r1, [pc, #412]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004206:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	495e      	ldr	r1, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4956      	ldr	r1, [pc, #344]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800424a:	4b51      	ldr	r3, [pc, #324]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4945      	ldr	r1, [pc, #276]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428a:	d106      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b40      	ldr	r3, [pc, #256]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a3f      	ldr	r2, [pc, #252]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
 8004298:	e011      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d10c      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f882 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d028      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	492d      	ldr	r1, [pc, #180]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4a28      	ldr	r2, [pc, #160]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f4:	60d3      	str	r3, [r2, #12]
 80042f6:	e011      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f853 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01c      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	4916      	ldr	r1, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004346:	d10c      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f830 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004384:	7cbb      	ldrb	r3, [r7, #18]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000

08004394 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000

080043b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043c2:	4b74      	ldr	r3, [pc, #464]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ce:	4b71      	ldr	r3, [pc, #452]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0203 	and.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d10d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
       ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043e6:	4b6b      	ldr	r3, [pc, #428]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
       ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d047      	beq.n	800448a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	e044      	b.n	800448a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d018      	beq.n	800443a <RCCEx_PLLSAI1_Config+0x86>
 8004408:	2b03      	cmp	r3, #3
 800440a:	d825      	bhi.n	8004458 <RCCEx_PLLSAI1_Config+0xa4>
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x62>
 8004410:	2b02      	cmp	r3, #2
 8004412:	d009      	beq.n	8004428 <RCCEx_PLLSAI1_Config+0x74>
 8004414:	e020      	b.n	8004458 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004416:	4b5f      	ldr	r3, [pc, #380]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004426:	e01a      	b.n	800445e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004428:	4b5a      	ldr	r3, [pc, #360]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d116      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004438:	e013      	b.n	8004462 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800443a:	4b56      	ldr	r3, [pc, #344]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004446:	4b53      	ldr	r3, [pc, #332]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004456:	e006      	b.n	8004466 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      break;
 800445c:	e004      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004466:	bf00      	nop
    }

    if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800446e:	4b49      	ldr	r3, [pc, #292]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	430b      	orrs	r3, r1
 8004484:	4943      	ldr	r1, [pc, #268]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d17c      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004490:	4b40      	ldr	r3, [pc, #256]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3f      	ldr	r2, [pc, #252]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800449a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449c:	f7fc fde8 	bl	8001070 <HAL_GetTick>
 80044a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a2:	e009      	b.n	80044b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a4:	f7fc fde4 	bl	8001070 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d902      	bls.n	80044b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	73fb      	strb	r3, [r7, #15]
        break;
 80044b6:	e005      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b8:	4b36      	ldr	r3, [pc, #216]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ef      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d15f      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d110      	bne.n	80044f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d0:	4b30      	ldr	r3, [pc, #192]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	06d2      	lsls	r2, r2, #27
 80044e8:	430a      	orrs	r2, r1
 80044ea:	492a      	ldr	r1, [pc, #168]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	610b      	str	r3, [r1, #16]
 80044f0:	e027      	b.n	8004542 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d112      	bne.n	800451e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004500:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6892      	ldr	r2, [r2, #8]
 8004508:	0211      	lsls	r1, r2, #8
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6912      	ldr	r2, [r2, #16]
 800450e:	0852      	lsrs	r2, r2, #1
 8004510:	3a01      	subs	r2, #1
 8004512:	0552      	lsls	r2, r2, #21
 8004514:	430a      	orrs	r2, r1
 8004516:	491f      	ldr	r1, [pc, #124]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	610b      	str	r3, [r1, #16]
 800451c:	e011      	b.n	8004542 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6892      	ldr	r2, [r2, #8]
 800452e:	0211      	lsls	r1, r2, #8
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6952      	ldr	r2, [r2, #20]
 8004534:	0852      	lsrs	r2, r2, #1
 8004536:	3a01      	subs	r2, #1
 8004538:	0652      	lsls	r2, r2, #25
 800453a:	430a      	orrs	r2, r1
 800453c:	4915      	ldr	r1, [pc, #84]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a13      	ldr	r2, [pc, #76]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800454c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fc fd8f 	bl	8001070 <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004554:	e009      	b.n	800456a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004556:	f7fc fd8b 	bl	8001070 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d902      	bls.n	800456a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	73fb      	strb	r3, [r7, #15]
          break;
 8004568:	e005      	b.n	8004576 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0ef      	beq.n	8004556 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4903      	ldr	r1, [pc, #12]	; (8004594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e049      	b.n	800463e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fb5e 	bl	8000c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f000 fc86 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e049      	b.n	80046ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f841 	bl	80046f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 fc2f 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <HAL_TIM_PWM_Start+0x24>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e03c      	b.n	80047a6 <HAL_TIM_PWM_Start+0x9e>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d109      	bne.n	8004746 <HAL_TIM_PWM_Start+0x3e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	bf14      	ite	ne
 800473e:	2301      	movne	r3, #1
 8004740:	2300      	moveq	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	e02f      	b.n	80047a6 <HAL_TIM_PWM_Start+0x9e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d109      	bne.n	8004760 <HAL_TIM_PWM_Start+0x58>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e022      	b.n	80047a6 <HAL_TIM_PWM_Start+0x9e>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b0c      	cmp	r3, #12
 8004764:	d109      	bne.n	800477a <HAL_TIM_PWM_Start+0x72>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	e015      	b.n	80047a6 <HAL_TIM_PWM_Start+0x9e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b10      	cmp	r3, #16
 800477e:	d109      	bne.n	8004794 <HAL_TIM_PWM_Start+0x8c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e008      	b.n	80047a6 <HAL_TIM_PWM_Start+0x9e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07e      	b.n	80048ac <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Start+0xb6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	e023      	b.n	8004806 <HAL_TIM_PWM_Start+0xfe>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0xc6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	e01b      	b.n	8004806 <HAL_TIM_PWM_Start+0xfe>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0xd6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	e013      	b.n	8004806 <HAL_TIM_PWM_Start+0xfe>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xe6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_PWM_Start+0xfe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xf6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047fc:	e003      	b.n	8004806 <HAL_TIM_PWM_Start+0xfe>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fee6 	bl	80055e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <HAL_TIM_PWM_Start+0x1ac>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_TIM_PWM_Start+0x12a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <HAL_TIM_PWM_Start+0x1b0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIM_PWM_Start+0x12a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_TIM_PWM_Start+0x1b4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d101      	bne.n	8004836 <HAL_TIM_PWM_Start+0x12e>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_TIM_PWM_Start+0x130>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_TIM_PWM_Start+0x1ac>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_TIM_PWM_Start+0x162>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d004      	beq.n	800486a <HAL_TIM_PWM_Start+0x162>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_TIM_PWM_Start+0x1b0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d115      	bne.n	8004896 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_TIM_PWM_Start+0x1b8>)
 8004872:	4013      	ands	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d015      	beq.n	80048a8 <HAL_TIM_PWM_Start+0x1a0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004882:	d011      	beq.n	80048a8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	e008      	b.n	80048a8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e000      	b.n	80048aa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	00010007 	.word	0x00010007

080048c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 facb 	bl	8004eaa <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fabd 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 face 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0204 	mvn.w	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 faa5 	bl	8004eaa <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa97 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 faa8 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d020      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0208 	mvn.w	r2, #8
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa7f 	bl	8004eaa <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa71 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa82 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa59 	bl	8004eaa <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa4b 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa5c 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fa29 	bl	8004e82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fe5c 	bl	800570c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fe54 	bl	8005720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa1b 	bl	8004ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0220 	mvn.w	r2, #32
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fe1c 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e0ff      	b.n	8004ce6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b14      	cmp	r3, #20
 8004af2:	f200 80f0 	bhi.w	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004cd7 	.word	0x08004cd7
 8004b04:	08004cd7 	.word	0x08004cd7
 8004b08:	08004cd7 	.word	0x08004cd7
 8004b0c:	08004b91 	.word	0x08004b91
 8004b10:	08004cd7 	.word	0x08004cd7
 8004b14:	08004cd7 	.word	0x08004cd7
 8004b18:	08004cd7 	.word	0x08004cd7
 8004b1c:	08004bd3 	.word	0x08004bd3
 8004b20:	08004cd7 	.word	0x08004cd7
 8004b24:	08004cd7 	.word	0x08004cd7
 8004b28:	08004cd7 	.word	0x08004cd7
 8004b2c:	08004c13 	.word	0x08004c13
 8004b30:	08004cd7 	.word	0x08004cd7
 8004b34:	08004cd7 	.word	0x08004cd7
 8004b38:	08004cd7 	.word	0x08004cd7
 8004b3c:	08004c55 	.word	0x08004c55
 8004b40:	08004cd7 	.word	0x08004cd7
 8004b44:	08004cd7 	.word	0x08004cd7
 8004b48:	08004cd7 	.word	0x08004cd7
 8004b4c:	08004c95 	.word	0x08004c95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa2a 	bl	8004fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6999      	ldr	r1, [r3, #24]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]
      break;
 8004b8e:	e0a5      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fa86 	bl	80050a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6999      	ldr	r1, [r3, #24]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	021a      	lsls	r2, r3, #8
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	619a      	str	r2, [r3, #24]
      break;
 8004bd0:	e084      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fadf 	bl	800519c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0208 	orr.w	r2, r2, #8
 8004bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0204 	bic.w	r2, r2, #4
 8004bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69d9      	ldr	r1, [r3, #28]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	61da      	str	r2, [r3, #28]
      break;
 8004c10:	e064      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fb37 	bl	800528c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	021a      	lsls	r2, r3, #8
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	61da      	str	r2, [r3, #28]
      break;
 8004c52:	e043      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fb74 	bl	8005348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c92:	e023      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fbac 	bl	80053f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	021a      	lsls	r2, r3, #8
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cd4:	e002      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop

08004cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_ConfigClockSource+0x1c>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0b6      	b.n	8004e7a <HAL_TIM_ConfigClockSource+0x18a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d48:	d03e      	beq.n	8004dc8 <HAL_TIM_ConfigClockSource+0xd8>
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4e:	f200 8087 	bhi.w	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	f000 8086 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x176>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d87f      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d01a      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0xaa>
 8004d64:	2b70      	cmp	r3, #112	; 0x70
 8004d66:	d87b      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d68:	2b60      	cmp	r3, #96	; 0x60
 8004d6a:	d050      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x11e>
 8004d6c:	2b60      	cmp	r3, #96	; 0x60
 8004d6e:	d877      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	d03c      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0xfe>
 8004d74:	2b50      	cmp	r3, #80	; 0x50
 8004d76:	d873      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d058      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x13e>
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d86f      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d064      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15e>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d86b      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d060      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15e>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d867      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d05c      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15e>
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d05a      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15e>
 8004d98:	e062      	b.n	8004e60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004daa:	f000 fbf9 	bl	80055a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	609a      	str	r2, [r3, #8]
      break;
 8004dc6:	e04f      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	f000 fbe2 	bl	80055a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dea:	609a      	str	r2, [r3, #8]
      break;
 8004dec:	e03c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fb56 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2150      	movs	r1, #80	; 0x50
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbaf 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e02c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fb75 	bl	800550a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2160      	movs	r1, #96	; 0x60
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb9f 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e01c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fb36 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fb8f 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e00c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 fb86 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004e5e:	e003      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      break;
 8004e64:	e000      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <TIM_Base_SetConfig+0xbc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x20>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <TIM_Base_SetConfig+0xbc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0x52>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0x52>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <TIM_Base_SetConfig+0xc0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0x52>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <TIM_Base_SetConfig+0xc4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <TIM_Base_SetConfig+0xbc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0xa0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0b      	ldr	r2, [pc, #44]	; (8004fa8 <TIM_Base_SetConfig+0xc0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0xa0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <TIM_Base_SetConfig+0xc4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	615a      	str	r2, [r3, #20]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40014400 	.word	0x40014400

08004fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0201 	bic.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f023 0302 	bic.w	r3, r3, #2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a24      	ldr	r2, [pc, #144]	; (800509c <TIM_OC1_SetConfig+0xec>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <TIM_OC1_SetConfig+0x70>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <TIM_OC1_SetConfig+0xf0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC1_SetConfig+0x70>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <TIM_OC1_SetConfig+0xf4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10c      	bne.n	800503a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0308 	bic.w	r3, r3, #8
 8005026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a17      	ldr	r2, [pc, #92]	; (800509c <TIM_OC1_SetConfig+0xec>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_OC1_SetConfig+0xa2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <TIM_OC1_SetConfig+0xf0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC1_SetConfig+0xa2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <TIM_OC1_SetConfig+0xf4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400

080050a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f023 0210 	bic.w	r2, r3, #16
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a22      	ldr	r2, [pc, #136]	; (8005190 <TIM_OC2_SetConfig+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10d      	bne.n	8005128 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a19      	ldr	r2, [pc, #100]	; (8005190 <TIM_OC2_SetConfig+0xe8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_OC2_SetConfig+0x98>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <TIM_OC2_SetConfig+0xec>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC2_SetConfig+0x98>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <TIM_OC2_SetConfig+0xf0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d113      	bne.n	8005168 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	621a      	str	r2, [r3, #32]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40014000 	.word	0x40014000
 8005198:	40014400 	.word	0x40014400

0800519c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a21      	ldr	r2, [pc, #132]	; (8005280 <TIM_OC3_SetConfig+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10d      	bne.n	800521a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a18      	ldr	r2, [pc, #96]	; (8005280 <TIM_OC3_SetConfig+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_OC3_SetConfig+0x96>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a17      	ldr	r2, [pc, #92]	; (8005284 <TIM_OC3_SetConfig+0xe8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC3_SetConfig+0x96>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a16      	ldr	r2, [pc, #88]	; (8005288 <TIM_OC3_SetConfig+0xec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d113      	bne.n	800525a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400

0800528c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	031b      	lsls	r3, r3, #12
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a14      	ldr	r2, [pc, #80]	; (800533c <TIM_OC4_SetConfig+0xb0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_OC4_SetConfig+0x74>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <TIM_OC4_SetConfig+0xb4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_OC4_SetConfig+0x74>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <TIM_OC4_SetConfig+0xb8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d109      	bne.n	8005314 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400

08005348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800538c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <TIM_OC5_SetConfig+0xa4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_OC5_SetConfig+0x6a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <TIM_OC5_SetConfig+0xa8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC5_SetConfig+0x6a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <TIM_OC5_SetConfig+0xac>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d109      	bne.n	80053c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400

080053f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800543e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	051b      	lsls	r3, r3, #20
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <TIM_OC6_SetConfig+0xa8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_OC6_SetConfig+0x6c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <TIM_OC6_SetConfig+0xac>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC6_SetConfig+0x6c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a12      	ldr	r2, [pc, #72]	; (80054a8 <TIM_OC6_SetConfig+0xb0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d109      	bne.n	8005478 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	029b      	lsls	r3, r3, #10
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550a:	b480      	push	{r7}
 800550c:	b087      	sub	sp, #28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f023 0210 	bic.w	r2, r3, #16
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	f043 0307 	orr.w	r3, r3, #7
 800558c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	609a      	str	r2, [r3, #8]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2201      	movs	r2, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1a      	ldr	r2, [r3, #32]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	431a      	orrs	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005640:	2302      	movs	r3, #2
 8005642:	e04f      	b.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005674:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10c      	bne.n	80056d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40014000 	.word	0x40014000

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e040      	b.n	80057c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb faea 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fade 	bl	8005d3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8af 	bl	80058e4 <UART_SetConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e01b      	b.n	80057c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800579e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb5d 	bl	8005e80 <UART_CheckIdleState>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	; 0x28
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d178      	bne.n	80058da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_UART_Transmit+0x24>
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e071      	b.n	80058dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2221      	movs	r2, #33	; 0x21
 8005804:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005806:	f7fb fc33 	bl	8001070 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005824:	d108      	bne.n	8005838 <HAL_UART_Transmit+0x68>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e003      	b.n	8005840 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005840:	e030      	b.n	80058a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fbbf 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e03c      	b.n	80058dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005874:	b292      	uxth	r2, r2
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3302      	adds	r3, #2
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e008      	b.n	8005892 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b292      	uxth	r2, r2
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1c8      	bne.n	8005842 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	2140      	movs	r1, #64	; 0x40
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fb88 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e005      	b.n	80058dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e8:	b08a      	sub	sp, #40	; 0x28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	431a      	orrs	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	4313      	orrs	r3, r2
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4bb4      	ldr	r3, [pc, #720]	; (8005be4 <UART_SetConfig+0x300>)
 8005914:	4013      	ands	r3, r2
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591c:	430b      	orrs	r3, r1
 800591e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4aa9      	ldr	r2, [pc, #676]	; (8005be8 <UART_SetConfig+0x304>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594c:	4313      	orrs	r3, r2
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005960:	430a      	orrs	r2, r1
 8005962:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4aa0      	ldr	r2, [pc, #640]	; (8005bec <UART_SetConfig+0x308>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d126      	bne.n	80059bc <UART_SetConfig+0xd8>
 800596e:	4ba0      	ldr	r3, [pc, #640]	; (8005bf0 <UART_SetConfig+0x30c>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b03      	cmp	r3, #3
 800597a:	d81b      	bhi.n	80059b4 <UART_SetConfig+0xd0>
 800597c:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <UART_SetConfig+0xa0>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	08005995 	.word	0x08005995
 8005988:	080059a5 	.word	0x080059a5
 800598c:	0800599d 	.word	0x0800599d
 8005990:	080059ad 	.word	0x080059ad
 8005994:	2301      	movs	r3, #1
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599a:	e080      	b.n	8005a9e <UART_SetConfig+0x1ba>
 800599c:	2302      	movs	r3, #2
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a2:	e07c      	b.n	8005a9e <UART_SetConfig+0x1ba>
 80059a4:	2304      	movs	r3, #4
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059aa:	e078      	b.n	8005a9e <UART_SetConfig+0x1ba>
 80059ac:	2308      	movs	r3, #8
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b2:	e074      	b.n	8005a9e <UART_SetConfig+0x1ba>
 80059b4:	2310      	movs	r3, #16
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ba:	e070      	b.n	8005a9e <UART_SetConfig+0x1ba>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a8c      	ldr	r2, [pc, #560]	; (8005bf4 <UART_SetConfig+0x310>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d138      	bne.n	8005a38 <UART_SetConfig+0x154>
 80059c6:	4b8a      	ldr	r3, [pc, #552]	; (8005bf0 <UART_SetConfig+0x30c>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d82d      	bhi.n	8005a30 <UART_SetConfig+0x14c>
 80059d4:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <UART_SetConfig+0xf8>)
 80059d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059da:	bf00      	nop
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005a31 	.word	0x08005a31
 80059e4:	08005a31 	.word	0x08005a31
 80059e8:	08005a31 	.word	0x08005a31
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a31 	.word	0x08005a31
 80059f4:	08005a31 	.word	0x08005a31
 80059f8:	08005a31 	.word	0x08005a31
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a29 	.word	0x08005a29
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a16:	e042      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	e03e      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a20:	2304      	movs	r3, #4
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a26:	e03a      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a28:	2308      	movs	r3, #8
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e036      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a30:	2310      	movs	r3, #16
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a36:	e032      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a6a      	ldr	r2, [pc, #424]	; (8005be8 <UART_SetConfig+0x304>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d12a      	bne.n	8005a98 <UART_SetConfig+0x1b4>
 8005a42:	4b6b      	ldr	r3, [pc, #428]	; (8005bf0 <UART_SetConfig+0x30c>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a50:	d01a      	beq.n	8005a88 <UART_SetConfig+0x1a4>
 8005a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a56:	d81b      	bhi.n	8005a90 <UART_SetConfig+0x1ac>
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	d00c      	beq.n	8005a78 <UART_SetConfig+0x194>
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a62:	d815      	bhi.n	8005a90 <UART_SetConfig+0x1ac>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <UART_SetConfig+0x18c>
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d008      	beq.n	8005a80 <UART_SetConfig+0x19c>
 8005a6e:	e00f      	b.n	8005a90 <UART_SetConfig+0x1ac>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e012      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e00e      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e00a      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e006      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e002      	b.n	8005a9e <UART_SetConfig+0x1ba>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a51      	ldr	r2, [pc, #324]	; (8005be8 <UART_SetConfig+0x304>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d17a      	bne.n	8005b9e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d824      	bhi.n	8005afa <UART_SetConfig+0x216>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x1d4>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005add 	.word	0x08005add
 8005abc:	08005afb 	.word	0x08005afb
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005afb 	.word	0x08005afb
 8005ac8:	08005aeb 	.word	0x08005aeb
 8005acc:	08005afb 	.word	0x08005afb
 8005ad0:	08005afb 	.word	0x08005afb
 8005ad4:	08005afb 	.word	0x08005afb
 8005ad8:	08005af3 	.word	0x08005af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005adc:	f7fe f9d8 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8005ae0:	61f8      	str	r0, [r7, #28]
        break;
 8005ae2:	e010      	b.n	8005b06 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae4:	4b44      	ldr	r3, [pc, #272]	; (8005bf8 <UART_SetConfig+0x314>)
 8005ae6:	61fb      	str	r3, [r7, #28]
        break;
 8005ae8:	e00d      	b.n	8005b06 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aea:	f7fe f939 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8005aee:	61f8      	str	r0, [r7, #28]
        break;
 8005af0:	e009      	b.n	8005b06 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af6:	61fb      	str	r3, [r7, #28]
        break;
 8005af8:	e005      	b.n	8005b06 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8107 	beq.w	8005d1c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d305      	bcc.n	8005b2a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d903      	bls.n	8005b32 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b30:	e0f4      	b.n	8005d1c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2200      	movs	r2, #0
 8005b36:	461c      	mov	r4, r3
 8005b38:	4615      	mov	r5, r2
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	022b      	lsls	r3, r5, #8
 8005b44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b48:	0222      	lsls	r2, r4, #8
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	6849      	ldr	r1, [r1, #4]
 8005b4e:	0849      	lsrs	r1, r1, #1
 8005b50:	2000      	movs	r0, #0
 8005b52:	4688      	mov	r8, r1
 8005b54:	4681      	mov	r9, r0
 8005b56:	eb12 0a08 	adds.w	sl, r2, r8
 8005b5a:	eb43 0b09 	adc.w	fp, r3, r9
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6c:	4650      	mov	r0, sl
 8005b6e:	4659      	mov	r1, fp
 8005b70:	f7fa fb7e 	bl	8000270 <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4613      	mov	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b82:	d308      	bcc.n	8005b96 <UART_SetConfig+0x2b2>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b8a:	d204      	bcs.n	8005b96 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	60da      	str	r2, [r3, #12]
 8005b94:	e0c2      	b.n	8005d1c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b9c:	e0be      	b.n	8005d1c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba6:	d16a      	bne.n	8005c7e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d834      	bhi.n	8005c1a <UART_SetConfig+0x336>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <UART_SetConfig+0x2d4>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005bfd 	.word	0x08005bfd
 8005bc0:	08005c05 	.word	0x08005c05
 8005bc4:	08005c1b 	.word	0x08005c1b
 8005bc8:	08005c0b 	.word	0x08005c0b
 8005bcc:	08005c1b 	.word	0x08005c1b
 8005bd0:	08005c1b 	.word	0x08005c1b
 8005bd4:	08005c1b 	.word	0x08005c1b
 8005bd8:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe f958 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8005be0:	61f8      	str	r0, [r7, #28]
        break;
 8005be2:	e020      	b.n	8005c26 <UART_SetConfig+0x342>
 8005be4:	efff69f3 	.word	0xefff69f3
 8005be8:	40008000 	.word	0x40008000
 8005bec:	40013800 	.word	0x40013800
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fe f95e 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8005c00:	61f8      	str	r0, [r7, #28]
        break;
 8005c02:	e010      	b.n	8005c26 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b4c      	ldr	r3, [pc, #304]	; (8005d38 <UART_SetConfig+0x454>)
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e00d      	b.n	8005c26 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe f8a9 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61f8      	str	r0, [r7, #28]
        break;
 8005c10:	e009      	b.n	8005c26 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e005      	b.n	8005c26 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d077      	beq.n	8005d1c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	005a      	lsls	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	441a      	add	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d916      	bls.n	8005c76 <UART_SetConfig+0x392>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d212      	bcs.n	8005c76 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f023 030f 	bic.w	r3, r3, #15
 8005c58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	8afa      	ldrh	r2, [r7, #22]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e052      	b.n	8005d1c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c7c:	e04e      	b.n	8005d1c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d827      	bhi.n	8005cd6 <UART_SetConfig+0x3f2>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <UART_SetConfig+0x3a8>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
 8005ca4:	08005cd7 	.word	0x08005cd7
 8005ca8:	08005cd7 	.word	0x08005cd7
 8005cac:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe f8ee 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	61f8      	str	r0, [r7, #28]
        break;
 8005cb6:	e014      	b.n	8005ce2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fe f900 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
        break;
 8005cbe:	e010      	b.n	8005ce2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <UART_SetConfig+0x454>)
 8005cc2:	61fb      	str	r3, [r7, #28]
        break;
 8005cc4:	e00d      	b.n	8005ce2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe f84b 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8005cca:	61f8      	str	r0, [r7, #28]
        break;
 8005ccc:	e009      	b.n	8005ce2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e005      	b.n	8005ce2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d019      	beq.n	8005d1c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	085a      	lsrs	r2, r3, #1
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d909      	bls.n	8005d16 <UART_SetConfig+0x432>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d205      	bcs.n	8005d16 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60da      	str	r2, [r3, #12]
 8005d14:	e002      	b.n	8005d1c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	00f42400 	.word	0x00f42400

08005d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01a      	beq.n	8005e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3a:	d10a      	bne.n	8005e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  }
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b098      	sub	sp, #96	; 0x60
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e90:	f7fb f8ee 	bl	8001070 <HAL_GetTick>
 8005e94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d12e      	bne.n	8005f02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eac:	2200      	movs	r2, #0
 8005eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f88c 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d021      	beq.n	8005f02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ede:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e6      	bne.n	8005ebe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e062      	b.n	8005fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d149      	bne.n	8005fa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f856 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d03c      	beq.n	8005fa4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	623b      	str	r3, [r7, #32]
   return(result);
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e6      	bne.n	8005f2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
 8005f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f7c:	61fa      	str	r2, [r7, #28]
 8005f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	69b9      	ldr	r1, [r7, #24]
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e5      	bne.n	8005f5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e011      	b.n	8005fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3758      	adds	r7, #88	; 0x58
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe0:	e049      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d045      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fb f841 	bl	8001070 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e048      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d031      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d110      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2208      	movs	r2, #8
 8006026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f838 	bl	800609e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2208      	movs	r2, #8
 8006032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e029      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006050:	d111      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f81e 	bl	800609e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d0a6      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b095      	sub	sp, #84	; 0x54
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c4:	643b      	str	r3, [r7, #64]	; 0x40
 80060c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3308      	adds	r3, #8
 80060de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e5      	bne.n	80060d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006110:	2b01      	cmp	r3, #1
 8006112:	d118      	bne.n	8006146 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	60bb      	str	r3, [r7, #8]
   return(result);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0310 	bic.w	r3, r3, #16
 8006128:	647b      	str	r3, [r7, #68]	; 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6979      	ldr	r1, [r7, #20]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	613b      	str	r3, [r7, #16]
   return(result);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	669a      	str	r2, [r3, #104]	; 0x68
}
 800615a:	bf00      	nop
 800615c:	3754      	adds	r7, #84	; 0x54
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <siprintf>:
 8006168:	b40e      	push	{r1, r2, r3}
 800616a:	b500      	push	{lr}
 800616c:	b09c      	sub	sp, #112	; 0x70
 800616e:	ab1d      	add	r3, sp, #116	; 0x74
 8006170:	9002      	str	r0, [sp, #8]
 8006172:	9006      	str	r0, [sp, #24]
 8006174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006178:	4809      	ldr	r0, [pc, #36]	; (80061a0 <siprintf+0x38>)
 800617a:	9107      	str	r1, [sp, #28]
 800617c:	9104      	str	r1, [sp, #16]
 800617e:	4909      	ldr	r1, [pc, #36]	; (80061a4 <siprintf+0x3c>)
 8006180:	f853 2b04 	ldr.w	r2, [r3], #4
 8006184:	9105      	str	r1, [sp, #20]
 8006186:	6800      	ldr	r0, [r0, #0]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	a902      	add	r1, sp, #8
 800618c:	f000 f992 	bl	80064b4 <_svfiprintf_r>
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	b01c      	add	sp, #112	; 0x70
 8006198:	f85d eb04 	ldr.w	lr, [sp], #4
 800619c:	b003      	add	sp, #12
 800619e:	4770      	bx	lr
 80061a0:	20000064 	.word	0x20000064
 80061a4:	ffff0208 	.word	0xffff0208

080061a8 <memset>:
 80061a8:	4402      	add	r2, r0
 80061aa:	4603      	mov	r3, r0
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d100      	bne.n	80061b2 <memset+0xa>
 80061b0:	4770      	bx	lr
 80061b2:	f803 1b01 	strb.w	r1, [r3], #1
 80061b6:	e7f9      	b.n	80061ac <memset+0x4>

080061b8 <__errno>:
 80061b8:	4b01      	ldr	r3, [pc, #4]	; (80061c0 <__errno+0x8>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000064 	.word	0x20000064

080061c4 <__libc_init_array>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4d0d      	ldr	r5, [pc, #52]	; (80061fc <__libc_init_array+0x38>)
 80061c8:	4c0d      	ldr	r4, [pc, #52]	; (8006200 <__libc_init_array+0x3c>)
 80061ca:	1b64      	subs	r4, r4, r5
 80061cc:	10a4      	asrs	r4, r4, #2
 80061ce:	2600      	movs	r6, #0
 80061d0:	42a6      	cmp	r6, r4
 80061d2:	d109      	bne.n	80061e8 <__libc_init_array+0x24>
 80061d4:	4d0b      	ldr	r5, [pc, #44]	; (8006204 <__libc_init_array+0x40>)
 80061d6:	4c0c      	ldr	r4, [pc, #48]	; (8006208 <__libc_init_array+0x44>)
 80061d8:	f000 fc6a 	bl	8006ab0 <_init>
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	2600      	movs	r6, #0
 80061e2:	42a6      	cmp	r6, r4
 80061e4:	d105      	bne.n	80061f2 <__libc_init_array+0x2e>
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ec:	4798      	blx	r3
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7ee      	b.n	80061d0 <__libc_init_array+0xc>
 80061f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f6:	4798      	blx	r3
 80061f8:	3601      	adds	r6, #1
 80061fa:	e7f2      	b.n	80061e2 <__libc_init_array+0x1e>
 80061fc:	08006b50 	.word	0x08006b50
 8006200:	08006b50 	.word	0x08006b50
 8006204:	08006b50 	.word	0x08006b50
 8006208:	08006b54 	.word	0x08006b54

0800620c <__retarget_lock_acquire_recursive>:
 800620c:	4770      	bx	lr

0800620e <__retarget_lock_release_recursive>:
 800620e:	4770      	bx	lr

08006210 <_free_r>:
 8006210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006212:	2900      	cmp	r1, #0
 8006214:	d044      	beq.n	80062a0 <_free_r+0x90>
 8006216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621a:	9001      	str	r0, [sp, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f1a1 0404 	sub.w	r4, r1, #4
 8006222:	bfb8      	it	lt
 8006224:	18e4      	addlt	r4, r4, r3
 8006226:	f000 f8df 	bl	80063e8 <__malloc_lock>
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <_free_r+0x94>)
 800622c:	9801      	ldr	r0, [sp, #4]
 800622e:	6813      	ldr	r3, [r2, #0]
 8006230:	b933      	cbnz	r3, 8006240 <_free_r+0x30>
 8006232:	6063      	str	r3, [r4, #4]
 8006234:	6014      	str	r4, [r2, #0]
 8006236:	b003      	add	sp, #12
 8006238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800623c:	f000 b8da 	b.w	80063f4 <__malloc_unlock>
 8006240:	42a3      	cmp	r3, r4
 8006242:	d908      	bls.n	8006256 <_free_r+0x46>
 8006244:	6825      	ldr	r5, [r4, #0]
 8006246:	1961      	adds	r1, r4, r5
 8006248:	428b      	cmp	r3, r1
 800624a:	bf01      	itttt	eq
 800624c:	6819      	ldreq	r1, [r3, #0]
 800624e:	685b      	ldreq	r3, [r3, #4]
 8006250:	1949      	addeq	r1, r1, r5
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	e7ed      	b.n	8006232 <_free_r+0x22>
 8006256:	461a      	mov	r2, r3
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b10b      	cbz	r3, 8006260 <_free_r+0x50>
 800625c:	42a3      	cmp	r3, r4
 800625e:	d9fa      	bls.n	8006256 <_free_r+0x46>
 8006260:	6811      	ldr	r1, [r2, #0]
 8006262:	1855      	adds	r5, r2, r1
 8006264:	42a5      	cmp	r5, r4
 8006266:	d10b      	bne.n	8006280 <_free_r+0x70>
 8006268:	6824      	ldr	r4, [r4, #0]
 800626a:	4421      	add	r1, r4
 800626c:	1854      	adds	r4, r2, r1
 800626e:	42a3      	cmp	r3, r4
 8006270:	6011      	str	r1, [r2, #0]
 8006272:	d1e0      	bne.n	8006236 <_free_r+0x26>
 8006274:	681c      	ldr	r4, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	6053      	str	r3, [r2, #4]
 800627a:	440c      	add	r4, r1
 800627c:	6014      	str	r4, [r2, #0]
 800627e:	e7da      	b.n	8006236 <_free_r+0x26>
 8006280:	d902      	bls.n	8006288 <_free_r+0x78>
 8006282:	230c      	movs	r3, #12
 8006284:	6003      	str	r3, [r0, #0]
 8006286:	e7d6      	b.n	8006236 <_free_r+0x26>
 8006288:	6825      	ldr	r5, [r4, #0]
 800628a:	1961      	adds	r1, r4, r5
 800628c:	428b      	cmp	r3, r1
 800628e:	bf04      	itt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	bf04      	itt	eq
 8006298:	1949      	addeq	r1, r1, r5
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	6054      	str	r4, [r2, #4]
 800629e:	e7ca      	b.n	8006236 <_free_r+0x26>
 80062a0:	b003      	add	sp, #12
 80062a2:	bd30      	pop	{r4, r5, pc}
 80062a4:	20000388 	.word	0x20000388

080062a8 <sbrk_aligned>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4e0e      	ldr	r6, [pc, #56]	; (80062e4 <sbrk_aligned+0x3c>)
 80062ac:	460c      	mov	r4, r1
 80062ae:	6831      	ldr	r1, [r6, #0]
 80062b0:	4605      	mov	r5, r0
 80062b2:	b911      	cbnz	r1, 80062ba <sbrk_aligned+0x12>
 80062b4:	f000 fba6 	bl	8006a04 <_sbrk_r>
 80062b8:	6030      	str	r0, [r6, #0]
 80062ba:	4621      	mov	r1, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 fba1 	bl	8006a04 <_sbrk_r>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	d00a      	beq.n	80062dc <sbrk_aligned+0x34>
 80062c6:	1cc4      	adds	r4, r0, #3
 80062c8:	f024 0403 	bic.w	r4, r4, #3
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d007      	beq.n	80062e0 <sbrk_aligned+0x38>
 80062d0:	1a21      	subs	r1, r4, r0
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fb96 	bl	8006a04 <_sbrk_r>
 80062d8:	3001      	adds	r0, #1
 80062da:	d101      	bne.n	80062e0 <sbrk_aligned+0x38>
 80062dc:	f04f 34ff 	mov.w	r4, #4294967295
 80062e0:	4620      	mov	r0, r4
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	2000038c 	.word	0x2000038c

080062e8 <_malloc_r>:
 80062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	1ccd      	adds	r5, r1, #3
 80062ee:	f025 0503 	bic.w	r5, r5, #3
 80062f2:	3508      	adds	r5, #8
 80062f4:	2d0c      	cmp	r5, #12
 80062f6:	bf38      	it	cc
 80062f8:	250c      	movcc	r5, #12
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	4607      	mov	r7, r0
 80062fe:	db01      	blt.n	8006304 <_malloc_r+0x1c>
 8006300:	42a9      	cmp	r1, r5
 8006302:	d905      	bls.n	8006310 <_malloc_r+0x28>
 8006304:	230c      	movs	r3, #12
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	2600      	movs	r6, #0
 800630a:	4630      	mov	r0, r6
 800630c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006310:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063e4 <_malloc_r+0xfc>
 8006314:	f000 f868 	bl	80063e8 <__malloc_lock>
 8006318:	f8d8 3000 	ldr.w	r3, [r8]
 800631c:	461c      	mov	r4, r3
 800631e:	bb5c      	cbnz	r4, 8006378 <_malloc_r+0x90>
 8006320:	4629      	mov	r1, r5
 8006322:	4638      	mov	r0, r7
 8006324:	f7ff ffc0 	bl	80062a8 <sbrk_aligned>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	4604      	mov	r4, r0
 800632c:	d155      	bne.n	80063da <_malloc_r+0xf2>
 800632e:	f8d8 4000 	ldr.w	r4, [r8]
 8006332:	4626      	mov	r6, r4
 8006334:	2e00      	cmp	r6, #0
 8006336:	d145      	bne.n	80063c4 <_malloc_r+0xdc>
 8006338:	2c00      	cmp	r4, #0
 800633a:	d048      	beq.n	80063ce <_malloc_r+0xe6>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	4631      	mov	r1, r6
 8006340:	4638      	mov	r0, r7
 8006342:	eb04 0903 	add.w	r9, r4, r3
 8006346:	f000 fb5d 	bl	8006a04 <_sbrk_r>
 800634a:	4581      	cmp	r9, r0
 800634c:	d13f      	bne.n	80063ce <_malloc_r+0xe6>
 800634e:	6821      	ldr	r1, [r4, #0]
 8006350:	1a6d      	subs	r5, r5, r1
 8006352:	4629      	mov	r1, r5
 8006354:	4638      	mov	r0, r7
 8006356:	f7ff ffa7 	bl	80062a8 <sbrk_aligned>
 800635a:	3001      	adds	r0, #1
 800635c:	d037      	beq.n	80063ce <_malloc_r+0xe6>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	442b      	add	r3, r5
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	f8d8 3000 	ldr.w	r3, [r8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d038      	beq.n	80063de <_malloc_r+0xf6>
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	42a2      	cmp	r2, r4
 8006370:	d12b      	bne.n	80063ca <_malloc_r+0xe2>
 8006372:	2200      	movs	r2, #0
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	e00f      	b.n	8006398 <_malloc_r+0xb0>
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	1b52      	subs	r2, r2, r5
 800637c:	d41f      	bmi.n	80063be <_malloc_r+0xd6>
 800637e:	2a0b      	cmp	r2, #11
 8006380:	d917      	bls.n	80063b2 <_malloc_r+0xca>
 8006382:	1961      	adds	r1, r4, r5
 8006384:	42a3      	cmp	r3, r4
 8006386:	6025      	str	r5, [r4, #0]
 8006388:	bf18      	it	ne
 800638a:	6059      	strne	r1, [r3, #4]
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	bf08      	it	eq
 8006390:	f8c8 1000 	streq.w	r1, [r8]
 8006394:	5162      	str	r2, [r4, r5]
 8006396:	604b      	str	r3, [r1, #4]
 8006398:	4638      	mov	r0, r7
 800639a:	f104 060b 	add.w	r6, r4, #11
 800639e:	f000 f829 	bl	80063f4 <__malloc_unlock>
 80063a2:	f026 0607 	bic.w	r6, r6, #7
 80063a6:	1d23      	adds	r3, r4, #4
 80063a8:	1af2      	subs	r2, r6, r3
 80063aa:	d0ae      	beq.n	800630a <_malloc_r+0x22>
 80063ac:	1b9b      	subs	r3, r3, r6
 80063ae:	50a3      	str	r3, [r4, r2]
 80063b0:	e7ab      	b.n	800630a <_malloc_r+0x22>
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	6862      	ldr	r2, [r4, #4]
 80063b6:	d1dd      	bne.n	8006374 <_malloc_r+0x8c>
 80063b8:	f8c8 2000 	str.w	r2, [r8]
 80063bc:	e7ec      	b.n	8006398 <_malloc_r+0xb0>
 80063be:	4623      	mov	r3, r4
 80063c0:	6864      	ldr	r4, [r4, #4]
 80063c2:	e7ac      	b.n	800631e <_malloc_r+0x36>
 80063c4:	4634      	mov	r4, r6
 80063c6:	6876      	ldr	r6, [r6, #4]
 80063c8:	e7b4      	b.n	8006334 <_malloc_r+0x4c>
 80063ca:	4613      	mov	r3, r2
 80063cc:	e7cc      	b.n	8006368 <_malloc_r+0x80>
 80063ce:	230c      	movs	r3, #12
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4638      	mov	r0, r7
 80063d4:	f000 f80e 	bl	80063f4 <__malloc_unlock>
 80063d8:	e797      	b.n	800630a <_malloc_r+0x22>
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	e7dc      	b.n	8006398 <_malloc_r+0xb0>
 80063de:	605b      	str	r3, [r3, #4]
 80063e0:	deff      	udf	#255	; 0xff
 80063e2:	bf00      	nop
 80063e4:	20000388 	.word	0x20000388

080063e8 <__malloc_lock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_lock+0x8>)
 80063ea:	f7ff bf0f 	b.w	800620c <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20000384 	.word	0x20000384

080063f4 <__malloc_unlock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__malloc_unlock+0x8>)
 80063f6:	f7ff bf0a 	b.w	800620e <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20000384 	.word	0x20000384

08006400 <__ssputs_r>:
 8006400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	688e      	ldr	r6, [r1, #8]
 8006406:	461f      	mov	r7, r3
 8006408:	42be      	cmp	r6, r7
 800640a:	680b      	ldr	r3, [r1, #0]
 800640c:	4682      	mov	sl, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4690      	mov	r8, r2
 8006412:	d82c      	bhi.n	800646e <__ssputs_r+0x6e>
 8006414:	898a      	ldrh	r2, [r1, #12]
 8006416:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800641a:	d026      	beq.n	800646a <__ssputs_r+0x6a>
 800641c:	6965      	ldr	r5, [r4, #20]
 800641e:	6909      	ldr	r1, [r1, #16]
 8006420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006424:	eba3 0901 	sub.w	r9, r3, r1
 8006428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800642c:	1c7b      	adds	r3, r7, #1
 800642e:	444b      	add	r3, r9
 8006430:	106d      	asrs	r5, r5, #1
 8006432:	429d      	cmp	r5, r3
 8006434:	bf38      	it	cc
 8006436:	461d      	movcc	r5, r3
 8006438:	0553      	lsls	r3, r2, #21
 800643a:	d527      	bpl.n	800648c <__ssputs_r+0x8c>
 800643c:	4629      	mov	r1, r5
 800643e:	f7ff ff53 	bl	80062e8 <_malloc_r>
 8006442:	4606      	mov	r6, r0
 8006444:	b360      	cbz	r0, 80064a0 <__ssputs_r+0xa0>
 8006446:	6921      	ldr	r1, [r4, #16]
 8006448:	464a      	mov	r2, r9
 800644a:	f000 faeb 	bl	8006a24 <memcpy>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	6126      	str	r6, [r4, #16]
 800645c:	6165      	str	r5, [r4, #20]
 800645e:	444e      	add	r6, r9
 8006460:	eba5 0509 	sub.w	r5, r5, r9
 8006464:	6026      	str	r6, [r4, #0]
 8006466:	60a5      	str	r5, [r4, #8]
 8006468:	463e      	mov	r6, r7
 800646a:	42be      	cmp	r6, r7
 800646c:	d900      	bls.n	8006470 <__ssputs_r+0x70>
 800646e:	463e      	mov	r6, r7
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	4632      	mov	r2, r6
 8006474:	4641      	mov	r1, r8
 8006476:	f000 faab 	bl	80069d0 <memmove>
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	1b9b      	subs	r3, r3, r6
 800647e:	60a3      	str	r3, [r4, #8]
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	4433      	add	r3, r6
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	2000      	movs	r0, #0
 8006488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648c:	462a      	mov	r2, r5
 800648e:	f000 fad7 	bl	8006a40 <_realloc_r>
 8006492:	4606      	mov	r6, r0
 8006494:	2800      	cmp	r0, #0
 8006496:	d1e0      	bne.n	800645a <__ssputs_r+0x5a>
 8006498:	6921      	ldr	r1, [r4, #16]
 800649a:	4650      	mov	r0, sl
 800649c:	f7ff feb8 	bl	8006210 <_free_r>
 80064a0:	230c      	movs	r3, #12
 80064a2:	f8ca 3000 	str.w	r3, [sl]
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ac:	81a3      	strh	r3, [r4, #12]
 80064ae:	f04f 30ff 	mov.w	r0, #4294967295
 80064b2:	e7e9      	b.n	8006488 <__ssputs_r+0x88>

080064b4 <_svfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4698      	mov	r8, r3
 80064ba:	898b      	ldrh	r3, [r1, #12]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	b09d      	sub	sp, #116	; 0x74
 80064c0:	4607      	mov	r7, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	d50e      	bpl.n	80064e6 <_svfiprintf_r+0x32>
 80064c8:	690b      	ldr	r3, [r1, #16]
 80064ca:	b963      	cbnz	r3, 80064e6 <_svfiprintf_r+0x32>
 80064cc:	2140      	movs	r1, #64	; 0x40
 80064ce:	f7ff ff0b 	bl	80062e8 <_malloc_r>
 80064d2:	6028      	str	r0, [r5, #0]
 80064d4:	6128      	str	r0, [r5, #16]
 80064d6:	b920      	cbnz	r0, 80064e2 <_svfiprintf_r+0x2e>
 80064d8:	230c      	movs	r3, #12
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e0d0      	b.n	8006684 <_svfiprintf_r+0x1d0>
 80064e2:	2340      	movs	r3, #64	; 0x40
 80064e4:	616b      	str	r3, [r5, #20]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ea:	2320      	movs	r3, #32
 80064ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064f4:	2330      	movs	r3, #48	; 0x30
 80064f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800669c <_svfiprintf_r+0x1e8>
 80064fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064fe:	f04f 0901 	mov.w	r9, #1
 8006502:	4623      	mov	r3, r4
 8006504:	469a      	mov	sl, r3
 8006506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800650a:	b10a      	cbz	r2, 8006510 <_svfiprintf_r+0x5c>
 800650c:	2a25      	cmp	r2, #37	; 0x25
 800650e:	d1f9      	bne.n	8006504 <_svfiprintf_r+0x50>
 8006510:	ebba 0b04 	subs.w	fp, sl, r4
 8006514:	d00b      	beq.n	800652e <_svfiprintf_r+0x7a>
 8006516:	465b      	mov	r3, fp
 8006518:	4622      	mov	r2, r4
 800651a:	4629      	mov	r1, r5
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ff6f 	bl	8006400 <__ssputs_r>
 8006522:	3001      	adds	r0, #1
 8006524:	f000 80a9 	beq.w	800667a <_svfiprintf_r+0x1c6>
 8006528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800652a:	445a      	add	r2, fp
 800652c:	9209      	str	r2, [sp, #36]	; 0x24
 800652e:	f89a 3000 	ldrb.w	r3, [sl]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a1 	beq.w	800667a <_svfiprintf_r+0x1c6>
 8006538:	2300      	movs	r3, #0
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006542:	f10a 0a01 	add.w	sl, sl, #1
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	9307      	str	r3, [sp, #28]
 800654a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800654e:	931a      	str	r3, [sp, #104]	; 0x68
 8006550:	4654      	mov	r4, sl
 8006552:	2205      	movs	r2, #5
 8006554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006558:	4850      	ldr	r0, [pc, #320]	; (800669c <_svfiprintf_r+0x1e8>)
 800655a:	f7f9 fe39 	bl	80001d0 <memchr>
 800655e:	9a04      	ldr	r2, [sp, #16]
 8006560:	b9d8      	cbnz	r0, 800659a <_svfiprintf_r+0xe6>
 8006562:	06d0      	lsls	r0, r2, #27
 8006564:	bf44      	itt	mi
 8006566:	2320      	movmi	r3, #32
 8006568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800656c:	0711      	lsls	r1, r2, #28
 800656e:	bf44      	itt	mi
 8006570:	232b      	movmi	r3, #43	; 0x2b
 8006572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006576:	f89a 3000 	ldrb.w	r3, [sl]
 800657a:	2b2a      	cmp	r3, #42	; 0x2a
 800657c:	d015      	beq.n	80065aa <_svfiprintf_r+0xf6>
 800657e:	9a07      	ldr	r2, [sp, #28]
 8006580:	4654      	mov	r4, sl
 8006582:	2000      	movs	r0, #0
 8006584:	f04f 0c0a 	mov.w	ip, #10
 8006588:	4621      	mov	r1, r4
 800658a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800658e:	3b30      	subs	r3, #48	; 0x30
 8006590:	2b09      	cmp	r3, #9
 8006592:	d94d      	bls.n	8006630 <_svfiprintf_r+0x17c>
 8006594:	b1b0      	cbz	r0, 80065c4 <_svfiprintf_r+0x110>
 8006596:	9207      	str	r2, [sp, #28]
 8006598:	e014      	b.n	80065c4 <_svfiprintf_r+0x110>
 800659a:	eba0 0308 	sub.w	r3, r0, r8
 800659e:	fa09 f303 	lsl.w	r3, r9, r3
 80065a2:	4313      	orrs	r3, r2
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	46a2      	mov	sl, r4
 80065a8:	e7d2      	b.n	8006550 <_svfiprintf_r+0x9c>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	9103      	str	r1, [sp, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfbb      	ittet	lt
 80065b6:	425b      	neglt	r3, r3
 80065b8:	f042 0202 	orrlt.w	r2, r2, #2
 80065bc:	9307      	strge	r3, [sp, #28]
 80065be:	9307      	strlt	r3, [sp, #28]
 80065c0:	bfb8      	it	lt
 80065c2:	9204      	strlt	r2, [sp, #16]
 80065c4:	7823      	ldrb	r3, [r4, #0]
 80065c6:	2b2e      	cmp	r3, #46	; 0x2e
 80065c8:	d10c      	bne.n	80065e4 <_svfiprintf_r+0x130>
 80065ca:	7863      	ldrb	r3, [r4, #1]
 80065cc:	2b2a      	cmp	r3, #42	; 0x2a
 80065ce:	d134      	bne.n	800663a <_svfiprintf_r+0x186>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9203      	str	r2, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfb8      	it	lt
 80065dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80065e0:	3402      	adds	r4, #2
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80066ac <_svfiprintf_r+0x1f8>
 80065e8:	7821      	ldrb	r1, [r4, #0]
 80065ea:	2203      	movs	r2, #3
 80065ec:	4650      	mov	r0, sl
 80065ee:	f7f9 fdef 	bl	80001d0 <memchr>
 80065f2:	b138      	cbz	r0, 8006604 <_svfiprintf_r+0x150>
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	eba0 000a 	sub.w	r0, r0, sl
 80065fa:	2240      	movs	r2, #64	; 0x40
 80065fc:	4082      	lsls	r2, r0
 80065fe:	4313      	orrs	r3, r2
 8006600:	3401      	adds	r4, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006608:	4825      	ldr	r0, [pc, #148]	; (80066a0 <_svfiprintf_r+0x1ec>)
 800660a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800660e:	2206      	movs	r2, #6
 8006610:	f7f9 fdde 	bl	80001d0 <memchr>
 8006614:	2800      	cmp	r0, #0
 8006616:	d038      	beq.n	800668a <_svfiprintf_r+0x1d6>
 8006618:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <_svfiprintf_r+0x1f0>)
 800661a:	bb1b      	cbnz	r3, 8006664 <_svfiprintf_r+0x1b0>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	3307      	adds	r3, #7
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	3308      	adds	r3, #8
 8006626:	9303      	str	r3, [sp, #12]
 8006628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662a:	4433      	add	r3, r6
 800662c:	9309      	str	r3, [sp, #36]	; 0x24
 800662e:	e768      	b.n	8006502 <_svfiprintf_r+0x4e>
 8006630:	fb0c 3202 	mla	r2, ip, r2, r3
 8006634:	460c      	mov	r4, r1
 8006636:	2001      	movs	r0, #1
 8006638:	e7a6      	b.n	8006588 <_svfiprintf_r+0xd4>
 800663a:	2300      	movs	r3, #0
 800663c:	3401      	adds	r4, #1
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	4619      	mov	r1, r3
 8006642:	f04f 0c0a 	mov.w	ip, #10
 8006646:	4620      	mov	r0, r4
 8006648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800664c:	3a30      	subs	r2, #48	; 0x30
 800664e:	2a09      	cmp	r2, #9
 8006650:	d903      	bls.n	800665a <_svfiprintf_r+0x1a6>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0c6      	beq.n	80065e4 <_svfiprintf_r+0x130>
 8006656:	9105      	str	r1, [sp, #20]
 8006658:	e7c4      	b.n	80065e4 <_svfiprintf_r+0x130>
 800665a:	fb0c 2101 	mla	r1, ip, r1, r2
 800665e:	4604      	mov	r4, r0
 8006660:	2301      	movs	r3, #1
 8006662:	e7f0      	b.n	8006646 <_svfiprintf_r+0x192>
 8006664:	ab03      	add	r3, sp, #12
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	462a      	mov	r2, r5
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <_svfiprintf_r+0x1f4>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	4638      	mov	r0, r7
 8006670:	f3af 8000 	nop.w
 8006674:	1c42      	adds	r2, r0, #1
 8006676:	4606      	mov	r6, r0
 8006678:	d1d6      	bne.n	8006628 <_svfiprintf_r+0x174>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	065b      	lsls	r3, r3, #25
 800667e:	f53f af2d 	bmi.w	80064dc <_svfiprintf_r+0x28>
 8006682:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006684:	b01d      	add	sp, #116	; 0x74
 8006686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668a:	ab03      	add	r3, sp, #12
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	462a      	mov	r2, r5
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <_svfiprintf_r+0x1f4>)
 8006692:	a904      	add	r1, sp, #16
 8006694:	4638      	mov	r0, r7
 8006696:	f000 f879 	bl	800678c <_printf_i>
 800669a:	e7eb      	b.n	8006674 <_svfiprintf_r+0x1c0>
 800669c:	08006b14 	.word	0x08006b14
 80066a0:	08006b1e 	.word	0x08006b1e
 80066a4:	00000000 	.word	0x00000000
 80066a8:	08006401 	.word	0x08006401
 80066ac:	08006b1a 	.word	0x08006b1a

080066b0 <_printf_common>:
 80066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	4616      	mov	r6, r2
 80066b6:	4699      	mov	r9, r3
 80066b8:	688a      	ldr	r2, [r1, #8]
 80066ba:	690b      	ldr	r3, [r1, #16]
 80066bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	bfb8      	it	lt
 80066c4:	4613      	movlt	r3, r2
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066cc:	4607      	mov	r7, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	b10a      	cbz	r2, 80066d6 <_printf_common+0x26>
 80066d2:	3301      	adds	r3, #1
 80066d4:	6033      	str	r3, [r6, #0]
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	0699      	lsls	r1, r3, #26
 80066da:	bf42      	ittt	mi
 80066dc:	6833      	ldrmi	r3, [r6, #0]
 80066de:	3302      	addmi	r3, #2
 80066e0:	6033      	strmi	r3, [r6, #0]
 80066e2:	6825      	ldr	r5, [r4, #0]
 80066e4:	f015 0506 	ands.w	r5, r5, #6
 80066e8:	d106      	bne.n	80066f8 <_printf_common+0x48>
 80066ea:	f104 0a19 	add.w	sl, r4, #25
 80066ee:	68e3      	ldr	r3, [r4, #12]
 80066f0:	6832      	ldr	r2, [r6, #0]
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	42ab      	cmp	r3, r5
 80066f6:	dc26      	bgt.n	8006746 <_printf_common+0x96>
 80066f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066fc:	1e13      	subs	r3, r2, #0
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	bf18      	it	ne
 8006702:	2301      	movne	r3, #1
 8006704:	0692      	lsls	r2, r2, #26
 8006706:	d42b      	bmi.n	8006760 <_printf_common+0xb0>
 8006708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800670c:	4649      	mov	r1, r9
 800670e:	4638      	mov	r0, r7
 8006710:	47c0      	blx	r8
 8006712:	3001      	adds	r0, #1
 8006714:	d01e      	beq.n	8006754 <_printf_common+0xa4>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	6922      	ldr	r2, [r4, #16]
 800671a:	f003 0306 	and.w	r3, r3, #6
 800671e:	2b04      	cmp	r3, #4
 8006720:	bf02      	ittt	eq
 8006722:	68e5      	ldreq	r5, [r4, #12]
 8006724:	6833      	ldreq	r3, [r6, #0]
 8006726:	1aed      	subeq	r5, r5, r3
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	bf0c      	ite	eq
 800672c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006730:	2500      	movne	r5, #0
 8006732:	4293      	cmp	r3, r2
 8006734:	bfc4      	itt	gt
 8006736:	1a9b      	subgt	r3, r3, r2
 8006738:	18ed      	addgt	r5, r5, r3
 800673a:	2600      	movs	r6, #0
 800673c:	341a      	adds	r4, #26
 800673e:	42b5      	cmp	r5, r6
 8006740:	d11a      	bne.n	8006778 <_printf_common+0xc8>
 8006742:	2000      	movs	r0, #0
 8006744:	e008      	b.n	8006758 <_printf_common+0xa8>
 8006746:	2301      	movs	r3, #1
 8006748:	4652      	mov	r2, sl
 800674a:	4649      	mov	r1, r9
 800674c:	4638      	mov	r0, r7
 800674e:	47c0      	blx	r8
 8006750:	3001      	adds	r0, #1
 8006752:	d103      	bne.n	800675c <_printf_common+0xac>
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	3501      	adds	r5, #1
 800675e:	e7c6      	b.n	80066ee <_printf_common+0x3e>
 8006760:	18e1      	adds	r1, r4, r3
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	2030      	movs	r0, #48	; 0x30
 8006766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800676a:	4422      	add	r2, r4
 800676c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006774:	3302      	adds	r3, #2
 8006776:	e7c7      	b.n	8006708 <_printf_common+0x58>
 8006778:	2301      	movs	r3, #1
 800677a:	4622      	mov	r2, r4
 800677c:	4649      	mov	r1, r9
 800677e:	4638      	mov	r0, r7
 8006780:	47c0      	blx	r8
 8006782:	3001      	adds	r0, #1
 8006784:	d0e6      	beq.n	8006754 <_printf_common+0xa4>
 8006786:	3601      	adds	r6, #1
 8006788:	e7d9      	b.n	800673e <_printf_common+0x8e>
	...

0800678c <_printf_i>:
 800678c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	7e0f      	ldrb	r7, [r1, #24]
 8006792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006794:	2f78      	cmp	r7, #120	; 0x78
 8006796:	4691      	mov	r9, r2
 8006798:	4680      	mov	r8, r0
 800679a:	460c      	mov	r4, r1
 800679c:	469a      	mov	sl, r3
 800679e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067a2:	d807      	bhi.n	80067b4 <_printf_i+0x28>
 80067a4:	2f62      	cmp	r7, #98	; 0x62
 80067a6:	d80a      	bhi.n	80067be <_printf_i+0x32>
 80067a8:	2f00      	cmp	r7, #0
 80067aa:	f000 80d4 	beq.w	8006956 <_printf_i+0x1ca>
 80067ae:	2f58      	cmp	r7, #88	; 0x58
 80067b0:	f000 80c0 	beq.w	8006934 <_printf_i+0x1a8>
 80067b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067bc:	e03a      	b.n	8006834 <_printf_i+0xa8>
 80067be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067c2:	2b15      	cmp	r3, #21
 80067c4:	d8f6      	bhi.n	80067b4 <_printf_i+0x28>
 80067c6:	a101      	add	r1, pc, #4	; (adr r1, 80067cc <_printf_i+0x40>)
 80067c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067cc:	08006825 	.word	0x08006825
 80067d0:	08006839 	.word	0x08006839
 80067d4:	080067b5 	.word	0x080067b5
 80067d8:	080067b5 	.word	0x080067b5
 80067dc:	080067b5 	.word	0x080067b5
 80067e0:	080067b5 	.word	0x080067b5
 80067e4:	08006839 	.word	0x08006839
 80067e8:	080067b5 	.word	0x080067b5
 80067ec:	080067b5 	.word	0x080067b5
 80067f0:	080067b5 	.word	0x080067b5
 80067f4:	080067b5 	.word	0x080067b5
 80067f8:	0800693d 	.word	0x0800693d
 80067fc:	08006865 	.word	0x08006865
 8006800:	080068f7 	.word	0x080068f7
 8006804:	080067b5 	.word	0x080067b5
 8006808:	080067b5 	.word	0x080067b5
 800680c:	0800695f 	.word	0x0800695f
 8006810:	080067b5 	.word	0x080067b5
 8006814:	08006865 	.word	0x08006865
 8006818:	080067b5 	.word	0x080067b5
 800681c:	080067b5 	.word	0x080067b5
 8006820:	080068ff 	.word	0x080068ff
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	602a      	str	r2, [r5, #0]
 800682c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006834:	2301      	movs	r3, #1
 8006836:	e09f      	b.n	8006978 <_printf_i+0x1ec>
 8006838:	6820      	ldr	r0, [r4, #0]
 800683a:	682b      	ldr	r3, [r5, #0]
 800683c:	0607      	lsls	r7, r0, #24
 800683e:	f103 0104 	add.w	r1, r3, #4
 8006842:	6029      	str	r1, [r5, #0]
 8006844:	d501      	bpl.n	800684a <_printf_i+0xbe>
 8006846:	681e      	ldr	r6, [r3, #0]
 8006848:	e003      	b.n	8006852 <_printf_i+0xc6>
 800684a:	0646      	lsls	r6, r0, #25
 800684c:	d5fb      	bpl.n	8006846 <_printf_i+0xba>
 800684e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006852:	2e00      	cmp	r6, #0
 8006854:	da03      	bge.n	800685e <_printf_i+0xd2>
 8006856:	232d      	movs	r3, #45	; 0x2d
 8006858:	4276      	negs	r6, r6
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	485a      	ldr	r0, [pc, #360]	; (80069c8 <_printf_i+0x23c>)
 8006860:	230a      	movs	r3, #10
 8006862:	e012      	b.n	800688a <_printf_i+0xfe>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6029      	str	r1, [r5, #0]
 800686c:	0605      	lsls	r5, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xe8>
 8006870:	681e      	ldr	r6, [r3, #0]
 8006872:	e002      	b.n	800687a <_printf_i+0xee>
 8006874:	0641      	lsls	r1, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xe4>
 8006878:	881e      	ldrh	r6, [r3, #0]
 800687a:	4853      	ldr	r0, [pc, #332]	; (80069c8 <_printf_i+0x23c>)
 800687c:	2f6f      	cmp	r7, #111	; 0x6f
 800687e:	bf0c      	ite	eq
 8006880:	2308      	moveq	r3, #8
 8006882:	230a      	movne	r3, #10
 8006884:	2100      	movs	r1, #0
 8006886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688a:	6865      	ldr	r5, [r4, #4]
 800688c:	60a5      	str	r5, [r4, #8]
 800688e:	2d00      	cmp	r5, #0
 8006890:	bfa2      	ittt	ge
 8006892:	6821      	ldrge	r1, [r4, #0]
 8006894:	f021 0104 	bicge.w	r1, r1, #4
 8006898:	6021      	strge	r1, [r4, #0]
 800689a:	b90e      	cbnz	r6, 80068a0 <_printf_i+0x114>
 800689c:	2d00      	cmp	r5, #0
 800689e:	d04b      	beq.n	8006938 <_printf_i+0x1ac>
 80068a0:	4615      	mov	r5, r2
 80068a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a6:	fb03 6711 	mls	r7, r3, r1, r6
 80068aa:	5dc7      	ldrb	r7, [r0, r7]
 80068ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068b0:	4637      	mov	r7, r6
 80068b2:	42bb      	cmp	r3, r7
 80068b4:	460e      	mov	r6, r1
 80068b6:	d9f4      	bls.n	80068a2 <_printf_i+0x116>
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d10b      	bne.n	80068d4 <_printf_i+0x148>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	07de      	lsls	r6, r3, #31
 80068c0:	d508      	bpl.n	80068d4 <_printf_i+0x148>
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	4299      	cmp	r1, r3
 80068c8:	bfde      	ittt	le
 80068ca:	2330      	movle	r3, #48	; 0x30
 80068cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d4:	1b52      	subs	r2, r2, r5
 80068d6:	6122      	str	r2, [r4, #16]
 80068d8:	f8cd a000 	str.w	sl, [sp]
 80068dc:	464b      	mov	r3, r9
 80068de:	aa03      	add	r2, sp, #12
 80068e0:	4621      	mov	r1, r4
 80068e2:	4640      	mov	r0, r8
 80068e4:	f7ff fee4 	bl	80066b0 <_printf_common>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d14a      	bne.n	8006982 <_printf_i+0x1f6>
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	b004      	add	sp, #16
 80068f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f043 0320 	orr.w	r3, r3, #32
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	4833      	ldr	r0, [pc, #204]	; (80069cc <_printf_i+0x240>)
 8006900:	2778      	movs	r7, #120	; 0x78
 8006902:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	6829      	ldr	r1, [r5, #0]
 800690a:	061f      	lsls	r7, r3, #24
 800690c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006910:	d402      	bmi.n	8006918 <_printf_i+0x18c>
 8006912:	065f      	lsls	r7, r3, #25
 8006914:	bf48      	it	mi
 8006916:	b2b6      	uxthmi	r6, r6
 8006918:	07df      	lsls	r7, r3, #31
 800691a:	bf48      	it	mi
 800691c:	f043 0320 	orrmi.w	r3, r3, #32
 8006920:	6029      	str	r1, [r5, #0]
 8006922:	bf48      	it	mi
 8006924:	6023      	strmi	r3, [r4, #0]
 8006926:	b91e      	cbnz	r6, 8006930 <_printf_i+0x1a4>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	f023 0320 	bic.w	r3, r3, #32
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	2310      	movs	r3, #16
 8006932:	e7a7      	b.n	8006884 <_printf_i+0xf8>
 8006934:	4824      	ldr	r0, [pc, #144]	; (80069c8 <_printf_i+0x23c>)
 8006936:	e7e4      	b.n	8006902 <_printf_i+0x176>
 8006938:	4615      	mov	r5, r2
 800693a:	e7bd      	b.n	80068b8 <_printf_i+0x12c>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	6826      	ldr	r6, [r4, #0]
 8006940:	6961      	ldr	r1, [r4, #20]
 8006942:	1d18      	adds	r0, r3, #4
 8006944:	6028      	str	r0, [r5, #0]
 8006946:	0635      	lsls	r5, r6, #24
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	d501      	bpl.n	8006950 <_printf_i+0x1c4>
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	e002      	b.n	8006956 <_printf_i+0x1ca>
 8006950:	0670      	lsls	r0, r6, #25
 8006952:	d5fb      	bpl.n	800694c <_printf_i+0x1c0>
 8006954:	8019      	strh	r1, [r3, #0]
 8006956:	2300      	movs	r3, #0
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	4615      	mov	r5, r2
 800695c:	e7bc      	b.n	80068d8 <_printf_i+0x14c>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	602a      	str	r2, [r5, #0]
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	2100      	movs	r1, #0
 800696a:	4628      	mov	r0, r5
 800696c:	f7f9 fc30 	bl	80001d0 <memchr>
 8006970:	b108      	cbz	r0, 8006976 <_printf_i+0x1ea>
 8006972:	1b40      	subs	r0, r0, r5
 8006974:	6060      	str	r0, [r4, #4]
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	6123      	str	r3, [r4, #16]
 800697a:	2300      	movs	r3, #0
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006980:	e7aa      	b.n	80068d8 <_printf_i+0x14c>
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	462a      	mov	r2, r5
 8006986:	4649      	mov	r1, r9
 8006988:	4640      	mov	r0, r8
 800698a:	47d0      	blx	sl
 800698c:	3001      	adds	r0, #1
 800698e:	d0ad      	beq.n	80068ec <_printf_i+0x160>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	079b      	lsls	r3, r3, #30
 8006994:	d413      	bmi.n	80069be <_printf_i+0x232>
 8006996:	68e0      	ldr	r0, [r4, #12]
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	4298      	cmp	r0, r3
 800699c:	bfb8      	it	lt
 800699e:	4618      	movlt	r0, r3
 80069a0:	e7a6      	b.n	80068f0 <_printf_i+0x164>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4632      	mov	r2, r6
 80069a6:	4649      	mov	r1, r9
 80069a8:	4640      	mov	r0, r8
 80069aa:	47d0      	blx	sl
 80069ac:	3001      	adds	r0, #1
 80069ae:	d09d      	beq.n	80068ec <_printf_i+0x160>
 80069b0:	3501      	adds	r5, #1
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	9903      	ldr	r1, [sp, #12]
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dcf2      	bgt.n	80069a2 <_printf_i+0x216>
 80069bc:	e7eb      	b.n	8006996 <_printf_i+0x20a>
 80069be:	2500      	movs	r5, #0
 80069c0:	f104 0619 	add.w	r6, r4, #25
 80069c4:	e7f5      	b.n	80069b2 <_printf_i+0x226>
 80069c6:	bf00      	nop
 80069c8:	08006b25 	.word	0x08006b25
 80069cc:	08006b36 	.word	0x08006b36

080069d0 <memmove>:
 80069d0:	4288      	cmp	r0, r1
 80069d2:	b510      	push	{r4, lr}
 80069d4:	eb01 0402 	add.w	r4, r1, r2
 80069d8:	d902      	bls.n	80069e0 <memmove+0x10>
 80069da:	4284      	cmp	r4, r0
 80069dc:	4623      	mov	r3, r4
 80069de:	d807      	bhi.n	80069f0 <memmove+0x20>
 80069e0:	1e43      	subs	r3, r0, #1
 80069e2:	42a1      	cmp	r1, r4
 80069e4:	d008      	beq.n	80069f8 <memmove+0x28>
 80069e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ee:	e7f8      	b.n	80069e2 <memmove+0x12>
 80069f0:	4402      	add	r2, r0
 80069f2:	4601      	mov	r1, r0
 80069f4:	428a      	cmp	r2, r1
 80069f6:	d100      	bne.n	80069fa <memmove+0x2a>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a02:	e7f7      	b.n	80069f4 <memmove+0x24>

08006a04 <_sbrk_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d06      	ldr	r5, [pc, #24]	; (8006a20 <_sbrk_r+0x1c>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	f7fa fa54 	bl	8000ebc <_sbrk>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_sbrk_r+0x1a>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_sbrk_r+0x1a>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	20000380 	.word	0x20000380

08006a24 <memcpy>:
 8006a24:	440a      	add	r2, r1
 8006a26:	4291      	cmp	r1, r2
 8006a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a2c:	d100      	bne.n	8006a30 <memcpy+0xc>
 8006a2e:	4770      	bx	lr
 8006a30:	b510      	push	{r4, lr}
 8006a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	d1f9      	bne.n	8006a32 <memcpy+0xe>
 8006a3e:	bd10      	pop	{r4, pc}

08006a40 <_realloc_r>:
 8006a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a44:	4680      	mov	r8, r0
 8006a46:	4614      	mov	r4, r2
 8006a48:	460e      	mov	r6, r1
 8006a4a:	b921      	cbnz	r1, 8006a56 <_realloc_r+0x16>
 8006a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a50:	4611      	mov	r1, r2
 8006a52:	f7ff bc49 	b.w	80062e8 <_malloc_r>
 8006a56:	b92a      	cbnz	r2, 8006a64 <_realloc_r+0x24>
 8006a58:	f7ff fbda 	bl	8006210 <_free_r>
 8006a5c:	4625      	mov	r5, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a64:	f000 f81b 	bl	8006a9e <_malloc_usable_size_r>
 8006a68:	4284      	cmp	r4, r0
 8006a6a:	4607      	mov	r7, r0
 8006a6c:	d802      	bhi.n	8006a74 <_realloc_r+0x34>
 8006a6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a72:	d812      	bhi.n	8006a9a <_realloc_r+0x5a>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7ff fc36 	bl	80062e8 <_malloc_r>
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d0ed      	beq.n	8006a5e <_realloc_r+0x1e>
 8006a82:	42bc      	cmp	r4, r7
 8006a84:	4622      	mov	r2, r4
 8006a86:	4631      	mov	r1, r6
 8006a88:	bf28      	it	cs
 8006a8a:	463a      	movcs	r2, r7
 8006a8c:	f7ff ffca 	bl	8006a24 <memcpy>
 8006a90:	4631      	mov	r1, r6
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff fbbc 	bl	8006210 <_free_r>
 8006a98:	e7e1      	b.n	8006a5e <_realloc_r+0x1e>
 8006a9a:	4635      	mov	r5, r6
 8006a9c:	e7df      	b.n	8006a5e <_realloc_r+0x1e>

08006a9e <_malloc_usable_size_r>:
 8006a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa2:	1f18      	subs	r0, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bfbc      	itt	lt
 8006aa8:	580b      	ldrlt	r3, [r1, r0]
 8006aaa:	18c0      	addlt	r0, r0, r3
 8006aac:	4770      	bx	lr
	...

08006ab0 <_init>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr

08006abc <_fini>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr
